{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/NTangle }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using CoreEx.Entities;
{{#ifeq Root.JsonSerializer 'Newtonsoft'}}
using Newtonsoft.Json;
{{/ifeq}}
using NTangle;
using NTangle.Cdc;
using System;
using System.Collections.Generic;
{{#ifeq Root.JsonSerializer 'SystemText'}}
using System.Text.Json.Serialization;
{{/ifeq}}
{{#if UsesGlobalIdentifier}}
using System.Threading.Tasks;
{{/if}}

namespace {{Root.NamespacePublisher}}.Entities
{
    /// <summary>
    /// Represents the CDC model for the root (parent) database table '[{{Schema}}].[{{Name}}]'.
    /// </summary>
    public partial class {{Model}}Cdc : IEntity{{#ifval ColumnConfigIsDeleted}}, ILogicallyDeletedExtended{{/ifval}}{{#ifne SelectedTenantIdColumns.Count 0}}, ITenantId{{/ifne}}{{#if HasPartitionKey}}, IPartitionKey{{/if}}{{#if IdentifierMapping}}, IGlobalIdentifier<{{Root.IdentifierMappingDotNetType}}>{{/if}}{{#if UsesGlobalIdentifier}}, ILinkIdentifierMapping<{{Root.IdentifierMappingDotNetType}}>{{/if}}
    {
{{#if IdentifierMapping}}
        /// <inheritdoc/>
  {{#ifeq Root.JsonSerializer 'Newtonsoft'}}
        [JsonProperty("globalId"]
  {{else}}
        [JsonPropertyName("globalId")]
  {{/ifeq}}
        public {{Root.IdentifierMappingDotNetType}}? GlobalId { get; set; }

{{/if}}
{{#each SelectedEntityColumns}}
        /// <summary>
        /// Gets or sets the {{sentence NameAlias}} '[{{Parent.Schema}}].[{{Parent.Name}}].[{{#ifval IdentifierMappingParent}}{{IdentifierMappingParent.Name}}{{else}}{{Name}}{{/ifval}}]' {{#ifval IdentifierMappingParent}}mapped identifier{{else}}column{{/ifval}} value.
        /// </summary>
  {{#if IgnoreSerialization}}
        [JsonIgnore]
  {{else}}
    {{#ifeq Root.JsonSerializer 'Newtonsoft'}}
        [JsonProperty("{{camel NameAlias}}")]
    {{else}}
        [JsonPropertyName("{{camel NameAlias}}")]
    {{/ifeq}}
  {{/if}}
        public {{DotNetType}}{{#if IsDotNetNullable}}?{{/if}} {{pascal NameAlias}} { get; set; }
  {{#unless @last}}

  {{else}}
    {{#ifne Parent.JoinNonCdcChildren.Count 0}}

    {{/ifne}}
  {{/unless}}
{{/each}}
{{#each JoinNonCdcChildren}}
  {{#each Columns}}
        /// <summary>
        /// Gets or sets the {{sentence NameAlias}} column value ({{lower Parent.Type}} join table '[{{Parent.Schema}}].[{{Parent.Name}}].[{{Name}}]').
        /// </summary>
    {{#if IgnoreSerialization}}
        [JsonIgnore]
    {{else}}
      {{#ifeq Root.JsonSerializer 'Newtonsoft'}}
        [JsonProperty("{{camel NameAlias}}")]
      {{else}}
        [JsonPropertyName("{{camel NameAlias}}")]
      {{/ifeq}}
    {{/if}}
        public {{DotNetType}}{{#if IsDotNetNullable}}?{{/if}} {{pascal NameAlias}} { get; set; }
    {{#unless @last}}

    {{else}}
      {{#unless @../last}}

      {{/unless}}
    {{/unless}}
  {{/each}}
{{/each}}
{{#each JoinCdcChildren}}

  {{#ifeq JoinCardinality 'OneToMany'}}
        /// <summary>
        /// Gets or sets the related (one-to-many) <see cref="{{Parent.Model}}Cdc.{{Model}}Collection"/> (database table '[{{Schema}}].[{{Table}}]').
        /// </summary>
    {{#ifeq Root.JsonSerializer 'Newtonsoft'}}
        [JsonProperty("{{camel Property}}")]
    {{else}}
        [JsonPropertyName("{{camel Property}}")]
    {{/ifeq}}
        public {{Parent.Model}}Cdc.{{Model}}CdcCollection? {{Property}} { get; set; }
  {{else}}
        /// <summary>
        /// Gets or sets the related (one-to-one) <see cref="{{Parent.Model}}Cdc.{{Model}}"/> (database table '[{{Schema}}].[{{Table}}]').
        /// </summary>
    {{#ifeq Root.JsonSerializer 'Newtonsoft'}}
        [JsonProperty("{{camel Property}}")]
    {{else}}
        [JsonPropertyName("{{camel Property}}")]
    {{/ifeq}}
        public {{Parent.Model}}Cdc.{{Model}}Cdc? {{Property}} { get; set; }
  {{/ifeq}}
{{/each}}

        /// <inheritdoc/>
{{#ifeq Root.JsonSerializer 'Newtonsoft'}}
        [JsonProperty("etag")]
{{else}}
        [JsonPropertyName("etag")]
{{/ifeq}}
        public string? ETag { get; set; }

{{#ifval ColumnConfigIsDeleted}}
        /// <inheritdoc/>
        public void ClearWhereDeleted()
        {
            if (!IsDeleted.HasValue || !IsDeleted.Value)
                return;

  {{#each SelectedEntityColumns}}
    {{#unless IncludeColumnOnDelete}}
            {{pascal NameAlias}} = default{{#if IsDotNetNullable}}!{{/if}};
    {{/unless}}
  {{/each}}
  {{#each JoinNonCdcChildren}}
    {{#each Columns}}
      {{#unless IncludeColumnOnDelete}}
            {{pascal NameAlias}} = default{{#if IsDotNetNullable}}!{{/if}};
      {{/unless}}
    {{/each}}
  {{/each}}
  {{#each JoinCdcChildren}}
            {{Property}} = default!;
  {{/each}}
        }

{{/ifval}}
        /// <inheritdoc/>
        [JsonIgnore]
        public CompositeKey PrimaryKey => new CompositeKey({{#if UsesGlobalIdentifier}}GlobalId{{else}}{{#each PrimaryKeyColumns}}{{#unless @first}}, {{/unless}}{{pascal NameAlias}}{{/each}}{{/if}});
{{#ifne SelectedTenantIdColumns.Count 0}}

        /// <inheritdoc/>
  {{#ifeq Root.JsonSerializer 'Newtonsoft'}}
        [JsonProperty("tenantId")]
  {{else}}
        [JsonPropertyName("tenantId")]
  {{/ifeq}}
        public string? TenantId => new CompositeKey({{#each SelectedTenantIdColumns}}{{pascal NameAlias}}{{#unless @last}}, {{/unless}}{{/each}}).ToString();
{{/ifne}}
{{#if HasPartitionKey}}

        /// <inheritdoc/>
        [JsonIgnore]
        public string? PartitionKey => {{#if PartitionKey}}"{{PartitionKey}}"{{else}}new CompositeKey({{#each SelectedPartitionKeyColumns}}{{#ifeq Name '*'}}"{{Parent.Schema}}.{{Parent.Name}}"{{else}}{{pascal NameAlias}}{{/ifeq}}{{#unless @last}}, {{/unless}}{{/each}}).ToString(){{/if}};
{{/if}}
{{#if UsesGlobalIdentifier}}

        /// <inheritdoc/>
        [JsonIgnore]
        public CompositeKey TableKey => new CompositeKey({{#each PrimaryKeyColumns}}{{#unless @first}}, {{/unless}}{{pascal NameAlias}}{{/each}});

        /// <inheritdoc/>
        public async Task LinkIdentifierMappingsAsync(ValueIdentifierMappingCollection<{{Root.IdentifierMappingDotNetType}}> coll, IIdentifierGenerator<{{Root.IdentifierMappingDotNetType}}> idGen)
        {
  {{#if IdentifierMapping}}
            coll.AddAsync(GlobalId == default, async () => new ValueIdentifierMapping<{{Root.IdentifierMappingDotNetType}}> { Value = this, Property = nameof(GlobalId), Schema = "{{Schema}}", Table = "{{Name}}", Key = TableKey.ToString(), GlobalId = await idGen.GenerateIdentifierAsync<{{Model}}Cdc>().ConfigureAwait(false) });
  {{/if}}
  {{#each SelectedEntityColumns}}
    {{#ifval IdentifierMappingParent}}
            coll.AddAsync({{NameAlias}} == default && {{IdentifierMappingParent.NameAlias}} != default, async () => new ValueIdentifierMapping<{{Root.IdentifierMappingDotNetType}}> { Value = this, Property = nameof({{NameAlias}}), Schema = "{{IdentifierMappingSchema}}", Table = "{{IdentifierMappingTable}}", Key = {{IdentifierMappingParent.NameAlias}}.ToString(), GlobalId = await idGen.GenerateIdentifierAsync<{{Parent.Model}}Cdc>().ConfigureAwait(false) });
    {{/ifval}}
  {{/each}}
  {{#each JoinCdcChildren}}
    {{#ifeq JoinCardinality 'OneToMany'}}
            {{Property}}?.ForEach(async item => await item.LinkIdentifierMappingsAsync(coll, idGen).ConfigureAwait(false));
    {{else}}
            await ({{Property}}?.LinkIdentifierMappingsAsync(coll, idGen) ?? Task.CompletedTask).ConfigureAwait(false);
    {{/ifeq}}
  {{/each}}
        }

        /// <inheritdoc/>
        public void RelinkIdentifierMappings(ValueIdentifierMappingCollection<{{Root.IdentifierMappingDotNetType}}> coll)
        {
  {{#if IdentifierMapping}}
            coll.Invoke(GlobalId == default, () => GlobalId = coll.GetGlobalId(this, nameof(GlobalId)));
  {{/if}}
  {{#each SelectedEntityColumns}}
    {{#ifval IdentifierMappingParent}}
            coll.Invoke({{NameAlias}} == default && {{IdentifierMappingParent.NameAlias}} != default, () => {{NameAlias}} = coll.GetGlobalId(this, nameof({{NameAlias}})));
    {{/ifval}}
  {{/each}}
  {{#each JoinCdcChildren}}
    {{#ifeq JoinCardinality 'OneToMany'}}
            {{Property}}?.ForEach(item => item.RelinkIdentifierMappings(coll));
    {{else}}
            {{Property}}?.RelinkIdentifierMappings(coll);
    {{/ifeq}}
  {{/each}}
        }
{{/if}}
{{#each DistinctModels}}

        #region {{Model}}Cdc

        /// <summary>
        /// Represents the CDC model for the related (child) database table '[{{Schema}}].[{{Table}}]' (known uniquely as '{{Name}}').
        /// </summary>
        public partial class {{Model}}Cdc : IPrimaryKey{{#if IdentifierMapping}}, IGlobalIdentifier<{{Root.IdentifierMappingDotNetType}}>{{/if}}{{#if UsesGlobalIdentifier}}, ILinkIdentifierMapping<{{Root.IdentifierMappingDotNetType}}>{{/if}}
        {
  {{#if IdentifierMapping}}
            /// <inheritdoc/>
    {{#ifeq Root.JsonSerializer 'Newtonsoft'}}
            [JsonProperty("globalId")]
    {{else}}
            [JsonPropertyName("globalId")]
    {{/ifeq}}
            public {{Root.IdentifierMappingDotNetType}}? GlobalId { get; set; }

  {{/if}}
  {{#each Columns}}
            /// <summary>
            /// Gets or sets the {{sentence NameAlias}} '[{{Parent.Schema}}].[{{Parent.Name}}].[{{#ifval IdentifierMappingParent}}{{IdentifierMappingParent.Name}}{{else}}{{Name}}{{/ifval}}]' {{#ifval IdentifierMappingParent}}mapped identifier{{else}}column{{/ifval}} value.{{#if IsUsedInJoinOn}} This column is used within the join.{{/if}}
            /// </summary>
    {{#if IgnoreSerialization}}
            [JsonIgnore]
    {{else}}
      {{#ifeq Root.JsonSerializer 'Newtonsoft'}}
            [JsonProperty("{{camel NameAlias}}")]
      {{else}}
            [JsonPropertyName("{{camel NameAlias}}")]
      {{/ifeq}}
    {{/if}}
            public {{DotNetType}}{{#if IsDotNetNullable}}?{{/if}} {{pascal NameAlias}} { get; set; }
    {{#unless @last}}

    {{else}}
      {{#ifne Parent.JoinNonCdcChildren.Count 0}}

      {{/ifne}}
    {{/unless}}
  {{/each}}
  {{#each JoinNonCdcChildren}}
    {{#each Columns}}
            /// <summary>
            /// Gets or sets the '{{sentence NameAlias}}' column value ({{lower Parent.Type}} join table '[{{Parent.Schema}}].[{{Parent.Name}}].[{{Name}}]').
            /// </summary>
      {{#ifeq Root.JsonSerializer 'Newtonsoft'}}
            [JsonProperty("{{camel NameAlias}}", DefaultValueHandling = {{#if SerializationEmitDefault}}DefaultValueHandling.Include{{else}}DefaultValueHandling.Ignore{{/if}})]
      {{/ifeq}}
      {{#ifeq Root.JsonSerializer 'Newtonsoft'}}
            [JsonProperty("{{camel NameAlias}}")]
      {{else}}
            [JsonPropertyName("{{camel NameAlias}}")]
      {{/ifeq}}
            public {{DotNetType}}{{#if IsDotNetNullable}}?{{/if}} {{pascal NameAlias}} { get; set; }
      {{#unless @last}}

      {{else}}
        {{#unless @../last}}

        {{/unless}}
      {{/unless}}
    {{/each}}
  {{/each}}
  {{#each JoinCdcChildren}}

    {{#ifeq JoinCardinality 'OneToMany'}}
            /// <summary>
            /// Gets or sets the related (one-to-many) <see cref="{{Parent.Model}}Cdc.{{Model}}Collection"/> (database table '[{{Schema}}].[{{Table}}]').
            /// </summary>
      {{#ifeq Root.JsonSerializer 'Newtonsoft'}}
            [JsonProperty("{{camel Property}}")]
      {{else}}
            [JsonPropertyName("{{camel Property}}")]
      {{/ifeq}}
            public {{Parent.Model}}Cdc.{{Model}}CdcCollection? {{Property}} { get; set; }
    {{else}}
            /// <summary>
            /// Gets or sets the related (one-to-one) <see cref="{{Parent.Model}}Cdc.{{Model}}"/> (database table '[{{Schema}}].[{{Table}}]').
            /// </summary>
      {{#ifeq Root.JsonSerializer 'Newtonsoft'}}
            [JsonProperty("{{camel Property}}")]
      {{else}}
            [JsonPropertyName("{{camel Property}}")]
      {{/ifeq}}
            public {{Parent.Model}}Cdc.{{Model}}Cdc? {{Property}} { get; set; }
    {{/ifeq}}
  {{/each}}

            /// <inheritdoc/>
            [JsonIgnore]
            public CompositeKey PrimaryKey => new CompositeKey({{#each PrimaryKeyColumns}}{{#unless @first}}, {{/unless}}{{pascal NameAlias}}{{/each}});
  {{#each JoinHierarchyReverse}}
    {{#unless @last}}
      {{#each OnSelectColumns}}

            /// <summary>
            /// Gets or sets the '{{Parent.JoinTo}}_{{Name}}' additional joining column (informational); for internal join use only (not serialized).
            /// </summary>
            [JsonIgnore]
            public {{ToDbColumn.DotNetType}} {{pascal Parent.JoinTo}}_{{pascal NameAlias}} { get; set; }
      {{/each}}
    {{/unless}}
  {{/each}}
  {{#if UsesGlobalIdentifier}}

            /// <inheritdoc/>
            [JsonIgnore]
            public CompositeKey TableKey => new CompositeKey({{#each PrimaryKeyColumns}}{{#unless @first}}, {{/unless}}{{pascal NameAlias}}{{/each}});

            /// <inheritdoc/>
            public async Task LinkIdentifierMappingsAsync(ValueIdentifierMappingCollection<{{Root.IdentifierMappingDotNetType}}> coll, IIdentifierGenerator<{{Root.IdentifierMappingDotNetType}}> idGen)
            {
    {{#if IdentifierMapping}}
                coll.AddAsync(GlobalId == default, async () => new ValueIdentifierMapping<{{Root.IdentifierMappingDotNetType}}> { Value = this, Property = nameof(GlobalId), Schema = "{{Schema}}", Table = "{{Table}}", Key = TableKey.ToString(), GlobalId = await idGen.GenerateIdentifierAsync<{{Model}}Cdc>().ConfigureAwait(false) });
    {{/if}}
    {{#each Columns}}
      {{#ifval IdentifierMappingParent}}
                coll.AddAsync({{NameAlias}} == default && {{IdentifierMappingParent.NameAlias}} != default, async () => new ValueIdentifierMapping<{{Root.IdentifierMappingDotNetType}}> { Value = this, Property = nameof({{NameAlias}}), Schema = "{{IdentifierMappingSchema}}", Table = "{{IdentifierMappingTable}}", Key = {{IdentifierMappingParent.NameAlias}}.ToString(), GlobalId = await idGen.GenerateIdentifierAsync<{{Parent.Model}}Cdc>().ConfigureAwait(false) });
      {{/ifval}}
    {{/each}}
            }

            /// <inheritdoc/>
            public void RelinkIdentifierMappings(ValueIdentifierMappingCollection<{{Root.IdentifierMappingDotNetType}}> coll)
            {
    {{#if IdentifierMapping}}
                coll.Invoke(GlobalId == default, () => GlobalId = coll.GetGlobalId(this, nameof(GlobalId)));
    {{/if}}
    {{#each Columns}}
      {{#ifval IdentifierMappingParent}}
                coll.Invoke({{NameAlias}} == default && {{IdentifierMappingParent.NameAlias}} != default, () => {{NameAlias}} = coll.GetGlobalId(this, nameof({{NameAlias}})));
      {{/ifval}}
    {{/each}}
            }
  {{/if}}
        }

        /// <summary>
        /// Represents the CDC model collection for the related (child) database table '[{{Schema}}].[{{Name}}]'.
        /// </summary>
        public partial class {{Model}}CdcCollection : List<{{Model}}Cdc> { }

        #endregion
{{/each}}
    }
}

#pragma warning restore
#nullable restore