{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/NTangle }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

{{#ifne HostedServices.Count 0}}
using Microsoft.Extensions.Configuration;
{{/ifne}}
using Microsoft.Extensions.DependencyInjection;
{{#ifne HostedServices.Count 0}}
using NTangle;
{{/ifne}}
{{#if Outbox}}
using NTangle.Data;
using NTangle.Events;
{{/if}}
using {{Root.NamespacePublisher}}.Data;
{{#if Outbox}}
using {{Root.NamespacePublisher}}.Events;
{{/if}}
{{#ifne HostedServices.Count 0}}
using {{Root.NamespacePublisher}}.Services;
{{/ifne}}

namespace {{Root.NamespacePublisher}}
{
    /// <summary>
    /// Provides <see cref="IServiceCollection"/> extensions.
    /// </summary>
    public static class ServiceCollectionExtensions
    {
        /// <summary>
        /// Adds the generated <see cref="NTangle.Cdc.IEntityOrchestrator"/> scoped services.
        /// </summary>
        /// <param name="services">The <see cref="IServiceCollection"/>.</param>
        /// <returns>The <see cref="IServiceCollection"/>.</returns>
        public static IServiceCollection AddGeneratedOrchestratorServices(this IServiceCollection services)
{{#each Tables}}
            {{#if @first}}=> services{{else}}           {{/if}}.AddScoped<I{{Model}}CdcOrchestrator, {{Model}}CdcOrchestrator>(){{#if @last}};{{/if}}
{{/each}}
{{#ifne HostedServices.Count 0}}

        /// <summary>
        /// Adds the generated <see cref="NTangle.Services.HostedService"/> services.
        /// </summary>
        /// <param name="services">The <see cref="IServiceCollection"/>.</param>
        /// <param name="config">The <see cref="IConfiguration"/>.</param>
        /// <returns>The <see cref="IServiceCollection"/>.</returns>
        public static IServiceCollection AddGeneratedHostedServices(this IServiceCollection services, IConfiguration config)
  {{#each HostedServices}}
            {{#if @first}}=> services{{else}}           {{/if}}.AddNTangleHostedService<{{Model}}HostedService>(config){{#if @last}};{{/if}}
  {{/each}}
{{/ifne}}
{{#if Outbox}}

        /// <summary>
        /// Adds the generated <see cref="OutboxEventPublisher"/> (see <see cref="OutboxEventPublisherBase{TMapper}"/>) as the <see cref="IEventPublisher"/>, and the generated
        /// <see cref="OutboxDequeuePublisher"/> as the <see cref="IOutboxDequeuePublisher"/>, as scoped services.
        /// </summary>
        /// <param name="services">The <see cref="IServiceCollection"/>.</param>
        /// <returns>The <see cref="IServiceCollection"/>.</returns>
        public static IServiceCollection AddGeneratedOutboxEventPublishing(this IServiceCollection services)
            => services.AddScoped<IEventPublisher, OutboxEventPublisher>()
                       .AddScoped<IOutboxDequeuePublisher, OutboxDequeuePublisher>();
{{/if}}
    }
}

#pragma warning restore
#nullable restore