{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/NTangle }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

namespace Microsoft.Extensions.DependencyInjection;

/// <summary>
/// Provides <see cref="IServiceCollection"/> extensions.
/// </summary>
public static class ServiceCollectionExtensions
{
    /// <summary>
    /// Adds the generated <see cref="NTangle.Cdc.IEntityOrchestrator"/> scoped services.
    /// </summary>
    /// <param name="services">The <see cref="IServiceCollection"/>.</param>
    /// <returns>The <see cref="IServiceCollection"/>.</returns>
    public static IServiceCollection AddGeneratedCdcOrchestratorServices(this IServiceCollection services)
{{#each Tables}}
        {{#if @first}}=> services{{else}}           {{/if}}.AddScoped<I{{Model}}Orchestrator, {{Model}}Orchestrator>(){{#if @last}};{{/if}}
{{/each}}
{{#ifne Services.Count 0}}

    /// <summary>
    /// Adds the generated <see cref="NTangle.Services.CdcService{TOrchestrator, TEntity}"/> scoped services.
    /// </summary>
    /// <param name="services">The <see cref="IServiceCollection"/>.</param>
    /// <returns>The <see cref="IServiceCollection"/>.</returns>
    public static IServiceCollection AddGeneratedCdcServices(this IServiceCollection services)
  {{#each Services}}
        {{#if @first}}=> services{{else}}           {{/if}}.AddScoped<{{Model}}Service>(){{#if @last}};{{/if}}
  {{/each}}
{{/ifne}}
{{#ifne HostedServices.Count 0}}

    /// <summary>
    /// Adds the generated <see cref="NTangle.Services.CdcHostedService"/> services where enabled (see <see cref="CdcSettings.EnabledSettingsName"/>).
    /// </summary>
    /// <param name="services">The <see cref="IServiceCollection"/>.</param>
    /// <returns>The <see cref="IServiceCollection"/>.</returns>
    public static IServiceCollection AddGeneratedCdcHostedServices(this IServiceCollection services)
    {
        var settings = services.BuildServiceProvider().GetRequiredService<SettingsBase>();
  {{#each HostedServices}}
        AddGeneratedCdcHostedService<{{Model}}HostedService>(settings, services);
  {{/each}}
        return services;
    }

    /// <summary>
    /// Adds the generated hosted service.
    /// </summary>
    private static void AddGeneratedCdcHostedService<THostedService>(SettingsBase settings, IServiceCollection services) where THostedService : class, ICdcHostedService
    {
        if (settings.GetCdcValue<bool?>(typeof(THostedService).Name, CdcSettings.EnabledSettingsName) ?? true)
           services.AddHostedService<THostedService>();
    }
{{/ifne}}
}