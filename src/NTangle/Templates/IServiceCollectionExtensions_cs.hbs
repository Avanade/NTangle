{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/NTangle }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using CoreEx.Configuration;
using CoreEx.Database;
using CoreEx.Events;
{{#ifne HostedServices.Count 0}}
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
{{/ifne}}
{{#ifne HostedServices.Count 0}}
using NTangle;
{{/ifne}}
{{#if Outbox}}
using NTangle.Data;
using NTangle.Events;
{{/if}}
using {{Root.NamespacePublisher}}.Data;
{{#ifne HostedServices.Count 0}}
using {{Root.NamespacePublisher}}.Services;
{{/ifne}}
using System;

namespace Microsoft.Extensions.DependencyInjection
{
    /// <summary>
    /// Provides <see cref="IServiceCollection"/> extensions.
    /// </summary>
    public static class ServiceCollectionExtensions
    {
        /// <summary>
        /// Adds the generated <see cref="NTangle.Cdc.IEntityOrchestrator"/> scoped services.
        /// </summary>
        /// <param name="services">The <see cref="IServiceCollection"/>.</param>
        /// <returns>The <see cref="IServiceCollection"/>.</returns>
        public static IServiceCollection AddGeneratedOrchestratorServices(this IServiceCollection services)
{{#each Tables}}
            {{#if @first}}=> services{{else}}           {{/if}}.AddScoped<I{{Model}}CdcOrchestrator, {{Model}}CdcOrchestrator>(){{#if @last}};{{/if}}
{{/each}}
{{#ifne HostedServices.Count 0}}

        /// <summary>
        /// Adds the generated <see cref="NTangle.Services.CdcHostedService"/> services.
        /// </summary>
        /// <param name="services">The <see cref="IServiceCollection"/>.</param>
        /// <returns>The <see cref="IServiceCollection"/>.</returns>
        public static IServiceCollection AddGeneratedCdcHostedServices(this IServiceCollection services)
  {{#each HostedServices}}
            {{#if @first}}=> services{{else}}           {{/if}}.AddCdcHostedService<{{Model}}HostedService>(){{#if @last}};{{/if}}
  {{/each}}
{{/ifne}}
{{#if Outbox}}

        /// <summary>
        /// Adds the generated <see cref="EventOutboxEnqueue"/> as a <see cref="CoreEx.Events.IEventSender"/> scoped service.
        /// </summary>
        /// <param name="services">The <see cref="IServiceCollection"/>.</param>
        /// <param name="configure">The action to enable the <see cref="EventOutboxEnqueue"/> to be further configured.</param>
        /// <returns>The <see cref="IServiceCollection"/>.</returns>
        public static IServiceCollection AddGeneratedEventOutboxSender(this IServiceCollection services, Action<IServiceProvider, EventOutboxEnqueue>? configure = null)
            => services.AddScoped<IEventSender>(sp =>
            {
                var eoe = new EventOutboxEnqueue(sp.GetRequiredService<IDatabase>(), sp.GetRequiredService<ILogger<EventOutboxEnqueue>>());
                configure?.Invoke(sp, eoe);
                return eoe;
            });
{{/if}}
    }
}

#pragma warning restore
#nullable restore