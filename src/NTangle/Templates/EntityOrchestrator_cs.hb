{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/Beef }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using Microsoft.Extensions.Logging;
using NTangle;
using NTangle.Cdc;
using NTangle.Data;
using NTangle.Events;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using {{Root.NamespacePublisher}}.Entities;

namespace {{Root.NamespacePublisher}}.Data
{
    /// <summary>
    /// Enables the Change Data Capture (CDC) <see cref="{{Model}}Cdc"/> entity (aggregate root) orchestration (database table '[{{Schema}}].[{{Name}}]').
    /// </summary>
    public partial interface I{{Model}}CdcOrchestrator : IEntityOrchestrator { }

    /// <summary>
    /// Manages the Change Data Capture (CDC) <see cref="{{Model}}Cdc"/> entity (aggregate root) orchestration (database table '[{{Schema}}].[{{Name}}]').
    /// </summary>
    public partial class {{Model}}CdcOrchestrator : EntityOrchestrator<{{Model}}Cdc, {{Model}}CdcOrchestrator.{{Model}}CdcEnvelopeCollection, {{Model}}CdcOrchestrator.{{Model}}CdcEnvelope, VersionTrackingMapper{{#if UsesGlobalIdentifier}}, {{Root.IdentifierMappingDotNetType}}{{/if}}>, I{{Model}}CdcOrchestrator
    {
        private static readonly {{Model}}CdcMapper _{{camel Model}}CdcMapper = new {{Model}}CdcMapper();
{{#each CdcJoins}}
        private static readonly {{Model}}CdcMapper _{{camel Model}}CdcMapper = new {{Model}}CdcMapper();
{{/each}}
{{#each OrchestratorCtorParameters}}
  {{#if @first}}

  {{/if}}
        private readonly {{Type}} {{PrivateName}};
{{/each}}

        /// <summary>
        /// Initializes a new instance of the <see cref="{{Model}}CdcOrchestrator"/> class.
        /// </summary>
        /// <param name="db">The <see cref="{{Database}}"/>.</param>
        /// <param name="evtPub">The <see cref="IEventPublisher"/>.</param>
        /// <param name="logger">The <see cref="ILogger"/>.</param>
{{#if UsesGlobalIdentifier}}
        /// <param name="idGen">The <see cref="IStringIdentifierGenerator"/>.</param>
{{/if}}
{{#each OrchestratorCtorParameters}}
        /// <param name="{{ArgumentName}}">{{{Text}}}</param>
{{/each}}
        public {{Model}}CdcOrchestrator({{Database}} db, IEventPublisher evtPub, ILogger<{{Model}}CdcOrchestrator> logger{{#if UsesGlobalIdentifier}}, IIdentifierGenerator<{{Root.IdentifierMappingDotNetType}}> idGen{{/if}}{{#each OrchestratorCtorParameters}}, {{Type}} {{ArgumentName}}{{/each}}) :
            base(db, "[{{CdcSchema}}].[{{ExecuteStoredProcedure}}]", "[{{CdcSchema}}].[{{CompleteStoredProcedure}}]", evtPub, logger{{#if UsesGlobalIdentifier}}, "[{{Root.CdcSchema}}].[{{Root.IdentifierMappingStoredProcedure}}]", idGen, new IdentifierMappingMapper<{{Root.IdentifierMappingDotNetType}}>(){{/if}}){{#ifeq OrchestratorCtorParameters.Count 0}} => {{Model}}CdcOrchestratorCtor();{{/ifeq}}
{{#ifne OrchestratorCtorParameters.Count 0}}
        {
  {{#each OrchestratorCtorParameters}}
            {{PrivateName}} = {{ArgumentName}} ?? throw new ArgumentNullException(nameof({{ArgumentName}}));
  {{/each}}
            {{Model}}CdcOrchestratorCtor();
        }
{{/ifne}}

        partial void {{Model}}CdcOrchestratorCtor(); // Enables additional functionality to be added to the constructor.

        /// <inheritdoc/>
        protected override async Task<EntityOrchestratorResult<{{Model}}CdcEnvelopeCollection, {{Model}}CdcEnvelope>> GetBatchEntityDataAsync()
        {
            var {{Alias}}Coll = new {{Model}}CdcEnvelopeCollection();

            var result = await SelectQueryMultiSetAsync(
                // Root table: '[{{Schema}}].[{{Table}}]'
                new MultiSetCollArgs<{{Model}}CdcEnvelopeCollection, {{Model}}CdcEnvelope>(_{{camel Model}}CdcMapper, r => {{Alias}}Coll = r, stopOnNull: true){{#ifne CdcJoins.Count 0}},{{else}}).ConfigureAwait(false);{{/ifne}}
{{#each CdcJoins}}

                // Join table: '[{{Schema}}].[{{Table}}]' (unique name '{{Name}}')
                new MultiSetCollArgs<{{Parent.Model}}Cdc.{{Model}}CdcCollection, {{Parent.Model}}Cdc.{{Model}}Cdc>(_{{camel Model}}CdcMapper, r =>
                {
  {{#each JoinHierarchyReverse}}
                   {{indent IndentSpaces}} foreach (var {{Alias}} in {{#if @first}}r{{else}}{{HierarchyChild.Alias}}{{/if}}{{#unless @first}}.Coll{{/unless}}.GroupBy(x => new { {{#each OnSelectColumns}}{{#unless @last}}, {{/unless}}x.{{#if @../../first}}{{NameAlias}}{{else}}{{#if @../last}}{{NameAlias}}{{else}}{{pascal Parent.JoinTo}}_{{NameAlias}}{{/if}}{{/if}}{{/each}} }).Select(g => new { {{#each OnSelectColumns}}{{#unless @last}}, {{/unless}}g.Key.{{#if @../../first}}{{NameAlias}}{{else}}{{#if @../last}}{{NameAlias}}{{else}}{{pascal Parent.JoinTo}}_{{NameAlias}}{{/if}}{{/if}}{{/each}}, Coll = g.{{#if @last}}ToCollection<{{../Parent.Model}}Cdc.{{../Model}}CdcCollection, {{../Parent.Model}}Cdc.{{../Model}}Cdc>{{else}}ToList{{/if}}() }))
                   {{indent IndentSpaces}} {
    {{#unless @last}}
                   {{indent IndentSpaces}}     var {{#ifval HierarchyChild}}{{HierarchyChild.Alias}}{{else}}{{Parent.Alias}}{{/ifval}}Item = {{#ifval HierarchyChild}}{{HierarchyChild.Alias}}{{else}}{{Parent.Alias}}{{/ifval}}Coll.First(x => {{#each OnSelectColumns}}{{#unless @last}} && {{/unless}}x.{{ToColumnAlias}} == {{Parent.Alias}}.{{#if @../last}}{{ToColumnAlias}}{{else}}{{pascal Parent.JoinTo}}_{{NameAlias}}{{/if}}{{/each}}).{{Property}};
    {{else}}
                   {{indent IndentSpaces}}     {{#if @first}}{{Parent.Alias}}Coll{{else}}{{#ifnull HierarchyChild.HierarchyChild}}{{Parent.Alias}}{{else}}HierarchyChild.HierarchyChild.Alias{{/ifnull}}Item{{/if}}.Where(x => {{#each OnSelectColumns}}{{#unless @last}} && {{/unless}}x.{{ToColumnAlias}} == {{Parent.Alias}}.{{#if @../../first}}{{NameAlias}}{{else}}{{#if @../last}}{{NameAlias}}{{else}}{{pascal Parent.JoinTo}}_{{NameAlias}}{{/if}}{{/if}}{{/each}}).ForEach(x => x.{{Property}} = {{Alias}}.Coll{{#ifeq JoinCardinality 'OneToOne'}}.FirstOrDefault(){{/ifeq}});
    {{/unless}}
  {{/each}}
  {{#each JoinHierarchy}}
                   {{indent IndentSpaces}} }
  {{/each}}
                }){{#if @last}}).ConfigureAwait(false);{{else}},{{/if}}
{{/each}}

            result.Result.AddRange({{Alias}}Coll);
            return result;
        }

        /// <inheritdoc/>
        protected override string EventSubject => "{{#ifval Root.EventSubjectRoot}}{{Root.EventSubjectRoot}}.{{/ifval}}{{EventSubject}}";

        /// <inheritdoc/>
        protected override EventSubjectFormat EventSubjectFormat => EventSubjectFormat.{{EventSubjectFormat}};

        /// <inheritdoc/>
        protected override EventActionFormat EventActionFormat => EventActionFormat.{{Root.EventActionFormat}};

{{#ifne Root.EventSourceKind 'None'}}
        /// <inheritdoc/>
        protected override Uri? EventSource => new Uri("{{EventSourceUri}}", UriKind.{{Root.EventSourceKind}});

        /// <inheritdoc/>
        protected override EventSourceFormat EventSourceFormat { get; } = EventSourceFormat.{{EventSourceFormat}};

{{/ifne}}
{{#ifne ExcludePropertiesFromETag.Count 0}}
        /// <inheritdoc/>
        protected override string[]? ExcludePropertiesFromETag => new string[] 
            { 
  {{#each ExcludePropertiesFromETag}}
                "{{.}}"{{#unless @last}}, {{/unless}}
  {{/each}} 
            };

{{/ifne}}
        /// <summary>
        /// Represents a <see cref="{{Model}}Cdc"/> envelope to append the required (additional) database properties.
        /// </summary>
        public class {{Model}}CdcEnvelope : {{Model}}Cdc, IEntityEnvelope
        {
            /// <inheritdoc/>
            public OperationType DatabaseOperationType { get; set; }

            /// <inheritdoc/>
            public string? DatabaseTrackingHash { get; set; }

            /// <inheritdoc/>
            public byte[] DatabaseLsn { get; set; }
        }

        /// <summary>
        /// Represents a <see cref="{{Model}}CdcEnvelope"/> collection.
        /// </summary>
        public class {{Model}}CdcEnvelopeCollection : List<{{Model}}CdcEnvelope> { }

        /// <summary>
        /// Represents a <see cref="{{Model}}Cdc"/> database mapper.
        /// </summary>
        public class {{Model}}CdcMapper : IDatabaseMapper<{{Model}}CdcEnvelope>
        {
            /// <inheritdoc/>
            public {{Model}}CdcEnvelope MapFromDb(DatabaseRecord record) => new {{Model}}CdcEnvelope
            {
{{#if IdentifierMapping}}
                GlobalId = record.GetValue<{{Root.IdentifierMappingDotNetType}}?>("GlobalId"),
{{/if}}
{{#each SelectedEntityColumns}}
                {{pascal NameAlias}} = record.GetValue<{{DotNetType}}{{#if IsDotNetNullable}}?{{/if}}>("{{pascal NameAlias}}"),
{{/each}}
                DatabaseOperationType = record.GetValue<OperationType>("_OperationType"),
                DatabaseTrackingHash = record.GetValue<string>("_TrackingHash"),
                DatabaseLsn = record.GetValue<byte[]>("_Lsn")
            };
        }
{{#each CdcJoins}}

        /// <summary>
        /// Represents a <see cref="{{Model}}Cdc"/> database mapper.
        /// </summary>
        public class {{Model}}CdcMapper : IDatabaseMapper<{{Parent.Model}}Cdc.{{Model}}Cdc>
        {
            /// <inheritdoc/>
            public {{Parent.Model}}Cdc.{{Model}}Cdc MapFromDb(DatabaseRecord record) => new {{Parent.Model}}Cdc.{{Model}}Cdc
            {
  {{#each JoinHierarchyReverse}}
    {{#unless @last}}
      {{#each OnSelectColumns}}
                {{pascal Parent.JoinTo}}_{{NameAlias}} = record.GetValue<{{ToDbColumn.DotNetType}}>("{{pascal Parent.JoinTo}}_{{NameAlias}}"),
      {{/each}}
    {{/unless}}
  {{/each}}
  {{#each Columns}}
                {{pascal NameAlias}} = record.GetValue<{{DotNetType}}{{#if IsDotNetNullable}}?{{/if}}>("{{pascal NameAlias}}"){{#unless @last}},{{/unless}}
  {{/each}}
            };
        }
{{/each}}
    }
}

#pragma warning restore
#nullable restore