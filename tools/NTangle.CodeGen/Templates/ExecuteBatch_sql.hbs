{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/NTangle }}
BEGIN
  /*
   * This is automatically generated; any changes will be lost.
   */

  SET NOCOUNT ON;

  BEGIN TRY
    -- Declare variables.
    DECLARE @hasDataLoss BIT = 0
    DECLARE @{{pascal Name}}BaseMinLsn BINARY(10)
{{#each CdcJoins}}
    DECLARE @{{pascal Name}}BaseMinLsn BINARY(10)
{{/each}}

    -- Determine the minimum lsn.
    SET @{{pascal Name}}BaseMinLsn = sys.fn_cdc_get_min_lsn('{{Schema}}_{{Table}}');
{{#each CdcJoins}}
    SET @{{pascal Name}}BaseMinLsn = sys.fn_cdc_get_min_lsn('{{Schema}}_{{Table}}');
{{/each}}

    -- Determine the 'minimum' depending on whether reprocessing or next and set/increment accordingly.
    IF @{{pascal Name}}MinLsn IS NULL
    BEGIN
      SET @{{pascal Name}}MinLsn = sys.fn_cdc_get_min_lsn('{{Schema}}_{{Table}}');
{{#each CdcJoins}}
      SET @{{pascal Name}}MinLsn = sys.fn_cdc_get_min_lsn('{{Schema}}_{{Table}}');
{{/each}}
    END
    ELSE
    BEGIN
      IF @BatchTrackingId = 0
      BEGIN
        SET @{{pascal Name}}MinLsn = sys.fn_cdc_increment_lsn(@{{pascal Name}}MaxLsn);
{{#each CdcJoins}}
        SET @{{pascal Name}}MinLsn = sys.fn_cdc_increment_lsn(@{{pascal Name}}MaxLsn);
{{/each}}
      END
    END

    -- Determine the maximum lsn.
    IF @BatchTrackingId = 0
    BEGIN
      SET @{{pascal Name}}MaxLsn = sys.fn_cdc_get_max_lsn();
{{#each CdcJoins}}
      SET @{{pascal Name}}MaxLsn = @{{pascal Parent.Name}}MaxLsn
{{/each}}
    END

    -- The minimum should _not_ be less than the base otherwise we have lost data; either continue with this data loss, or error and stop.
    IF (@{{pascal Name}}MinLsn < @{{pascal Name}}BaseMinLsn) BEGIN IF (@ContinueWithDataLoss = 1) BEGIN SET @hasDataLoss = 1; SET @{{pascal Name}}MinLsn = @{{pascal Name}}BaseMinLsn END ELSE BEGIN ;THROW 56010, 'Unexpected data loss error for ''{{Schema}}.{{Table}}''; this indicates that the CDC data has probably been cleaned up before being successfully processed.', 1; END END
{{#each CdcJoins}}
    IF (@{{pascal Name}}MinLsn < @{{pascal Name}}BaseMinLsn) BEGIN IF (@ContinueWithDataLoss = 1) BEGIN SET @hasDataLoss = 1; SET @{{pascal Name}}MinLsn = @{{pascal Name}}BaseMinLsn END ELSE BEGIN ;THROW 56010, 'Unexpected data loss error for ''{{Schema}}.{{Table}}''; this indicates that the CDC data has probably been cleaned up before being successfully processed.', 1; END END
{{/each}}

    -- Find changes on the root table: '[{{Schema}}].[{{Table}}]' - this determines overall operation type: 'create', 'update' or 'delete'.
    CREATE TABLE #_changes ([_Lsn] BINARY(10), [_Op] INT, {{#each PrimaryKeyColumns}}[{{Name}}] {{upper DbColumn.Type}}{{#unless @last}}, {{/unless}}{{/each}})
    DECLARE @hasChanges BIT = 0

    IF (@{{pascal Name}}MinLsn <= @{{pascal Name}}MaxLsn)
    BEGIN
      INSERT INTO #_changes
        SELECT TOP (@MaxQuerySize)
            [_cdc].[__$start_lsn] AS [_Lsn],
            [_cdc].[__$operation] AS [_Op],
{{#each PrimaryKeyColumns}}
            [_cdc].[{{Name}}] AS [{{Name}}]{{#unless @last}},{{/unless}}
{{/each}}
          FROM cdc.fn_cdc_get_all_changes_{{Schema}}_{{Table}}(@{{pascal Name}}MinLsn, @{{pascal Name}}MaxLsn, 'all') AS [_cdc]
{{#each Where}}
          {{#if @first}}WHERE{{else}}  AND{{/if}} ({{#ifval Nullable}}[_cdc].[{{Name}}] {{SqlNullOperator}}{{#ifval Value}} OR {{/ifval}}{{/ifval}}{{#ifval Value}}[_cdc].[{{Name}}] {{SqlOperator}} {{Value}}{{/ifval}})
{{/each}}
          ORDER BY [_cdc].[__$start_lsn]

      IF (@@ROWCOUNT <> 0)
      BEGIN
        SET @hasChanges = 1
        SELECT @{{pascal Name}}MinLsn = MIN([_Lsn]), @{{pascal Name}}MaxLsn = MAX([_Lsn]) FROM #_changes
      END
    END

{{#each CdcJoins}}
    -- Find changes on related table: '[{{Schema}}].[{{Table}}]' - unique name '{{Name}}' - assume all are 'update' operation (i.e. it doesn't matter).
    IF (@{{pascal Name}}MinLsn <= @{{pascal Name}}MaxLsn)
    BEGIN
{{#ifne QuerySizeMultiplier 1}}
      DECLARE @{{Alias}}MaxQuerySize INT = CEILING(@MaxQuerySize * {{QuerySizeMultiplier}})
{{/ifne}}
      SELECT TOP ({{#ifeq QuerySizeMultiplier 1}}@MaxQuerySize{{else}}@{{Alias}}MaxQuerySize{{/ifeq}})
          [_cdc].[__$start_lsn] AS [_Lsn],
          4 AS [_Op],
{{#each Parent.PrimaryKeyColumns}}
          [{{Parent.Alias}}].[{{Name}}] AS [{{Name}}]{{#unless @last}},{{/unless}}
{{/each}}
        INTO #{{Alias}}
        FROM cdc.fn_cdc_get_all_changes_{{Schema}}_{{Table}}(@{{pascal Name}}MinLsn, @{{pascal Name}}MaxLsn, 'all') AS [_cdc]
{{#each JoinHierarchy}}
        INNER JOIN [{{JoinToSchema}}].[{{JoinToTable}}] AS [{{JoinToAlias}}] WITH (NOLOCK) ON ({{#each On}}{{#unless @first}} AND {{/unless}}{{#if Parent.IsFirstInJoinHierarchy}}[_cdc]{{else}}[{{Parent.Alias}}]{{/if}}.[{{Name}}] = {{#ifval ToStatement}}{{ToStatement}}{{else}}[{{Parent.JoinToAlias}}].[{{ToColumn}}]{{/ifval}}{{/each}})
{{/each}}
        ORDER BY [_cdc].[__$start_lsn]

      IF (@@ROWCOUNT <> 0)
      BEGIN
        SET @hasChanges = 1
        SELECT @{{pascal Name}}MinLsn = MIN([_Lsn]), @{{pascal Name}}MaxLsn = MAX([_Lsn]) FROM #{{Alias}}
    
        INSERT INTO #_changes
          SELECT *
            FROM #{{Alias}} AS [_{{Alias}}]
            WHERE NOT EXISTS (SELECT * FROM #_changes AS [_chg] WHERE {{#each Parent.PrimaryKeyColumns}}{{#unless @first}} AND {{/unless}}[_chg].[{{Name}}] = [_{{../Alias}}].[{{Name}}]{{/each}})
      END
    END

{{/each}}
    -- Select the LSN ranges and whether there is data loss.
    SELECT
        @{{pascal Name}}MinLsn AS [{{pascal Name}}MinLsn],
        @{{pascal Name}}MaxLsn AS [{{pascal Name}}MaxLsn],
{{#each CdcJoins}}
        @{{pascal Name}}MinLsn AS [{{pascal Name}}MinLsn],
        @{{pascal Name}}MaxLsn AS [{{pascal Name}}MaxLsn],
{{/each}}
        @hasDataLoss AS [HasDataLoss],
        @hasChanges AS [HasChanges]

    -- Exit here if there were no changes found.
    IF (@hasChanges = 0)
    BEGIN
      RETURN
    END

    -- Root table: '[{{Schema}}].[{{Table}}]' - uses LEFT OUTER JOIN's to get the deleted records.
    SELECT
        [_chg].[_Op] AS [_OperationType],
        [_chg].[_Lsn] AS [_Lsn],
{{#each PrimaryKeyColumns}}
        [_chg].[{{Name}}] AS [{{NameAlias}}],
{{/each}}
{{#each PrimaryKeyColumns}}
        [{{Parent.Alias}}].[{{Name}}] AS [TableKey_{{NameAlias}}],
{{/each}}
{{#each SelectedColumnsExcludingPrimaryKey}}
  {{#ifnull IdentifierMappingTable}}
        [{{Parent.Alias}}].[{{Name}}] AS [{{NameAlias}}],
  {{/ifnull}}
{{/each}}
{{#each JoinNonCdcChildren}}
  {{#each Columns}}
        [{{Parent.Alias}}].[{{Name}}] AS [{{NameAlias}}],
  {{/each}}
{{/each}}
        CASE WHEN EXISTS (SELECT 1 FROM [{{Schema}}].[{{Table}}] AS [__{{Alias}}] WHERE ({{#each PrimaryKeyColumns}}{{#unless @first}} AND {{/unless}}[__{{Parent.Alias}}].[{{Name}}] = [_chg].[{{Name}}]{{/each}})) THEN CAST (0 AS BIT) ELSE CAST (1 AS BIT) END AS [_IsPhysicallyDeleted]
      FROM #_changes AS [_chg]
      LEFT OUTER JOIN [{{Schema}}].[{{Table}}] AS [{{Alias}}] ON ({{#each PrimaryKeyColumns}}{{#unless @first}} AND {{/unless}}[{{Parent.Alias}}].[{{Name}}] = [_chg].[{{Name}}]{{/each}})
{{#each JoinNonCdcChildren}}
      {{JoinTypeSql}} [{{Schema}}].[{{Table}}] AS [{{Alias}}] ON ({{#each On}}{{#unless @first}} AND {{/unless}}[{{Parent.Alias}}].[{{Name}}] = {{#ifval ToStatement}}{{ToStatement}}{{else}}[{{Parent.JoinToAlias}}].[{{ToColumn}}]{{/ifval}}{{/each}})
{{/each}}
      ORDER BY [_Lsn] ASC

{{#each CdcJoins}}
    -- Related table: '[{{Schema}}].[{{Table}}]' - unique name '{{Name}}' - only use INNER JOINS to get what is actually there right now (where applicable).
    SELECT DISTINCT
  {{#each JoinHierarchyReverse}}
    {{#unless @last}}
      {{#each OnSelectColumns}}
        [{{Parent.JoinToAlias}}].[{{ToColumn}}] AS [{{pascal Parent.JoinTo}}_{{Name}}],  -- Additional joining column (informational).
      {{/each}}
    {{/unless}}
  {{/each}}
  {{#each ColumnsExcludeMapping}}
        [{{Parent.Alias}}].[{{Name}}] AS [{{NameAlias}}]{{#unless @last}},{{else}}{{#ifne Parent.JoinNonCdcChildren.Count 0}},{{/ifne}}{{/unless}}
  {{/each}}
  {{#each JoinNonCdcChildren}}
    {{#each Columns}}
        [{{Parent.Alias}}].[{{Name}}] AS [{{NameAlias}}]{{#unless @last}},{{else}}{{#unless @../last}},{{/unless}}{{/unless}}
    {{/each}}
  {{/each}}
      FROM #_changes AS [_chg]
      INNER JOIN [{{Parent.Schema}}].[{{Parent.Table}}] AS [{{Parent.Alias}}] ON ({{#each Parent.PrimaryKeyColumns}}{{#unless @first}} AND {{/unless}}[{{Parent.Alias}}].[{{Name}}] = [_chg].[{{Name}}]{{/each}})
  {{#each JoinHierarchyReverse}}
      INNER JOIN [{{Schema}}].[{{Table}}] AS [{{Alias}}] ON ({{#each On}}{{#unless @first}} AND {{/unless}}[{{Parent.Alias}}].[{{Name}}] = {{#ifval ToStatement}}{{ToStatement}}{{else}}[{{Parent.JoinToAlias}}].[{{ToColumn}}]{{/ifval}}{{/each}})
  {{/each}}
  {{#each JoinNonCdcChildren}}
      {{JoinTypeSql}} [{{Schema}}].[{{Table}}] AS [{{Alias}}] ON ({{#each On}}{{#unless @first}} AND {{/unless}}[{{Parent.Alias}}].[{{Name}}] = {{#ifval ToStatement}}{{ToStatement}}{{else}}[{{Parent.JoinToAlias}}].[{{ToColumn}}]{{/ifval}}{{/each}})
  {{/each}}
      WHERE [_chg].[_Op] <> 1

{{/each}}
    RETURN
  END TRY
  BEGIN CATCH
    -- Rollback transaction and rethrow error.
    IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION;

    THROW;
  END CATCH
END