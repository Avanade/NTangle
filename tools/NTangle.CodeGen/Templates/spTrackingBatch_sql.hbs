{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/NTangle }}
CREATE OR ALTER PROCEDURE [{{CdcSchema}}].[{{TrackingStoredProcedure}}]
  @BatchTrackingId BIGINT NULL = NULL,
  @{{pascal Name}}MinLsn BINARY(10) NULL = NULL,
  @{{pascal Name}}MaxLsn BINARY(10) NULL = NULL,
{{#each CdcJoins}}
  @{{pascal Name}}MinLsn BINARY(10) NULL = NULL,
  @{{pascal Name}}MaxLsn BINARY(10) NULL = NULL,
{{/each}}
  @VersionTrackingList AS NVARCHAR(MAX),
{{#if UsesGlobalIdentifier}}
  @IdentifierList AS NVARCHAR(MAX),
{{/if}}
  @HasDataLoss BIT = 0
AS
BEGIN
  /*
   * This is automatically generated; any changes will be lost.
   */

  SET NOCOUNT ON;

  BEGIN TRY
    -- Wrap in a transaction.
    BEGIN TRANSACTION

    -- Create or update the batch tracking accordingly (where applicable).
    IF @BatchTrackingId IS NOT NULL
    BEGIN
      IF @BatchTrackingId = 0
      BEGIN
        DECLARE @InsertedBatchTrackingId TABLE([BatchTrackingId] INT)
  
        INSERT INTO [{{CdcSchema}}].[{{BatchTrackingTable}}] (
            [{{pascal Name}}MinLsn],
            [{{pascal Name}}MaxLsn],
{{#each CdcJoins}}
            [{{pascal Name}}MinLsn],
            [{{pascal Name}}MaxLsn],
{{/each}}
            [CreatedDate],
            [IsComplete],
            [CorrelationId],
            [HasDataLoss]
          )
          OUTPUT inserted.BatchTrackingId INTO @InsertedBatchTrackingId
          VALUES (
            @{{pascal Name}}MinLsn,
            @{{pascal Name}}MaxLsn,
{{#each CdcJoins}}
            @{{pascal Name}}MinLsn,
            @{{pascal Name}}MaxLsn,
{{/each}}
            GETUTCDATE(),
            0,
            LOWER(CONVERT(NVARCHAR(64), NEWID())),
            @hasDataLoss
          )
  
          SELECT @BatchTrackingId = [BatchTrackingId] FROM @InsertedBatchTrackingId
      END
      ELSE
      BEGIN
        IF (@hasDataLoss = 1)
        BEGIN
          UPDATE [{{CdcSchema}}].[{{BatchTrackingTable}}]
            SET [HasDataLoss] = @hasDataLoss
            WHERE [BatchTrackingId] = @BatchTrackingId
        END
      END
  
      -- Return the *latest* batch tracking data.
      SELECT [_batch].[BatchTrackingId], [_batch].[CreatedDate], [_batch].[IsComplete], [_batch].[CompletedDate], [_batch].[CorrelationId], [_batch].[HasDataLoss]
        FROM [{{CdcSchema}}].[{{BatchTrackingTable}}] AS [_batch]
        WHERE [_batch].BatchTrackingId = @BatchTrackingId 
    END

    -- Get the existing version tracking hashes.
    SELECT
        [_vt].[Key],
        [_vt].[Hash]
      FROM [NTangle].[{{Root.VersionTrackingTable}}] as [_vt]
      WHERE [_vt].[Schema] = N'{{Schema}}' AND [_vt].[Table] = N'{{Table}}' AND [_vt].[Key] IN (SELECT VALUE FROM OPENJSON(@VersionTrackingList))

{{#if UsesGlobalIdentifier}}
    -- Get the existing global identifiers.
    SELECT * INTO #identifierList FROM OPENJSON(@IdentifierList) WITH ([Schema] NVARCHAR(50) '$.schema', [Table] NVARCHAR(127) '$.table', [Key] NVARCHAR(255) '$.key')

    SELECT [_i].[Schema], [_i].[Table], [_i].[Key], [n].[GlobalId]
      FROM [{{CdcSchema}}].[{{Root.IdentifierMappingTable}}] AS [n]
      RIGHT OUTER JOIN #identifierList AS [_i] ON [n].[Schema] = [_i].[Schema] AND [n].[Table] = [_i].[Table] AND [n].[Key] = [_i].[Key]

{{/if}}
    -- Commit the transaction.
    COMMIT TRANSACTION
    RETURN 0
  END TRY
  BEGIN CATCH
    -- Rollback transaction and rethrow error.
    IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION;

    THROW;
  END CATCH
END