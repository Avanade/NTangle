{{! Copyright (c) Avanade. Licensed under the MIT License. See https://github.com/Avanade/NTangle }}
/*
 * This file is automatically generated; any changes will be lost. 
 */

namespace {{Root.NamespacePublisher}}.Data;

/// <summary>
/// Enables the Change Data Capture (CDC) <see cref="{{Model}}Cdc"/> entity (aggregate root) orchestration (database table '[{{Schema}}].[{{Name}}]').
/// </summary>
public partial interface I{{Model}}Orchestrator : IEntityOrchestrator<{{Model}}Cdc> { }

/// <summary>
/// Manages the Change Data Capture (CDC) <see cref="{{Model}}Cdc"/> entity (aggregate root) orchestration (database table '[{{Schema}}].[{{Name}}]').
/// </summary>
public partial class {{Model}}Orchestrator : Entity{{#if Root.UseSidecar}}Sidecar{{/if}}Orchestrator<{{Model}}Cdc, {{Model}}Orchestrator.{{Model}}CdcEnvelopeCollection, {{Model}}Orchestrator.{{Model}}CdcEnvelope{{#if Root.UseSidecar}}, {{Model}}Orchestrator.{{Model}}BatchTracker, {{Model}}Orchestrator.{{Model}}BatchTrackerMapper{{/if}}{{#if UsesGlobalIdentifier}}, {{Root.IdentifierMappingDotNetType}}{{/if}}>, I{{Model}}Orchestrator
{
    private static readonly {{Model}}CdcMapper _{{camel Model}}CdcMapper = new();
{{#each DistinctModels}}
    private static readonly {{Model}}CdcMapper _{{camel Model}}CdcMapper = new();
{{/each}}
{{#each OrchestratorCtorParameters}}
  {{#if @first}}

  {{/if}}
    private readonly {{Type}} {{PrivateName}};
{{/each}}

    /// <summary>
    /// Initializes a new instance of the <see cref="{{Model}}Orchestrator"/> class.
    /// </summary>
    /// <param name="database">The {{#if Root.UseSidecar}}primary {{/if}}<see cref="{{Database}}"/>.</param>
{{#if Root.UseSidecar}}
    /// <param name="sidecarDatabase">The sidecar <see cref="ISidecarDatabase"/>.</param>
{{/if}}
    /// <param name="eventPublisher">The <see cref="IEventPublisher"/>.</param>
    /// <param name="jsonSerializer">The <see cref="IJsonSerializer"/>.</param>
    /// <param name="settings">The <see cref="SettingsBase"/>.</param>
    /// <param name="logger">The <see cref="ILogger"/>.</param>
{{#if UsesGlobalIdentifier}}
    /// <param name="idGen">The <see cref="IIdentifierGenerator{T}"/>.</param>
{{/if}}
{{#each OrchestratorCtorParameters}}
    /// <param name="{{ArgumentName}}">{{{Text}}}</param>
{{/each}}
    public {{Model}}Orchestrator({{Database}} database, {{#if Root.UseSidecar}}ISidecarDatabase sidecarDatabase, {{/if}}IEventPublisher eventPublisher, IJsonSerializer jsonSerializer, SettingsBase settings, ILogger<{{Model}}Orchestrator> logger{{#if UsesGlobalIdentifier}}, IIdentifierGenerator<{{Root.IdentifierMappingDotNetType}}> idGen{{/if}}{{#each OrchestratorCtorParameters}}, {{Type}} {{ArgumentName}}{{/each}})
        : base(database, {{#if Root.UseSidecar}}sidecarDatabase, {{/if}}eventPublisher, jsonSerializer, settings, logger{{#if UsesGlobalIdentifier}}, idGen{{/if}}){{#ifeq OrchestratorCtorParameters.Count 0}} => {{Model}}OrchestratorCtor();{{/ifeq}}
{{#ifne OrchestratorCtorParameters.Count 0}}
    {
  {{#each OrchestratorCtorParameters}}
        {{PrivateName}} = {{ArgumentName}}.ThrowIfNull(nameof({{ArgumentName}}));
  {{/each}}
        {{Model}}OrchestratorCtor();
    }
{{/ifne}}

    partial void {{Model}}OrchestratorCtor(); // Enables additional functionality to be added to the constructor.

    /// <inheritdoc/>
    protected override string ExecuteStoredProcedureName => "[{{CdcSchema}}].[{{ExecuteStoredProcedure}}]";

    /// <inheritdoc/>
    protected override string CompleteStoredProcedureName => "[{{CdcSchema}}].[{{CompleteStoredProcedure}}]";

{{#if UsesGlobalIdentifier}}
    /// <inheritdoc/>
    protected override string IdentifierMappingStoredProcedureName => "[{{Root.CdcSchema}}].[{{Root.IdentifierMappingStoredProcedure}}]";

{{/if}}
{{#if Root.UseSidecar}}
    /// <inheritdoc/>
    protected override string ExecuteCdcSqlResourceName => "Resources.Generated.{{Model}}ExecuteBatch.sql";

    /// <inheritdoc/>
    protected override string TrackingStoredProcedureName => "[{{CdcSchema}}].[{{TrackingStoredProcedure}}]";

    /// <inheritdoc/>
    protected override async Task GetBatchEntityDataAsync(EntityOrchestratorResult<{{Model}}CdcEnvelopeCollection, {{Model}}CdcEnvelope> result, DatabaseCommand? databaseCommand = null, CancellationToken cancellationToken = default)
    {
        static void lsnSynchronizer(DatabaseRecord dr, {{Model}}BatchTracker bt)
        {
            bt.{{Model}}MinLsn = dr.GetValue<byte[]>("{{pascal Name}}MinLsn");
            bt.{{Model}}MaxLsn = dr.GetValue<byte[]>("{{pascal Name}}MaxLsn");
{{#each CdcJoins}}
            bt.{{Model}}MinLsn = dr.GetValue<byte[]>("{{pascal Name}}MinLsn");
            bt.{{Model}}MaxLsn = dr.GetValue<byte[]>("{{pascal Name}}MaxLsn");
{{/each}}
        }

        var {{Alias}}Coll = new {{Model}}CdcEnvelopeCollection();

        await SelectQueryMultiSetAsync(result, databaseCommand, MultiSetArgs.Create(
            // Root table: '[{{Schema}}].[{{Table}}]'
            new MultiSetCollArgs<{{Model}}CdcEnvelopeCollection, {{Model}}CdcEnvelope>(_{{camel Model}}CdcMapper, __result => {{Alias}}Coll = __result, stopOnNull: true){{#ifne CdcJoins.Count 0}},{{else}}), lsnSynchronizer, cancellationToken).ConfigureAwait(false);{{/ifne}}
{{#each CdcJoins}}

            // Join table: '[{{Schema}}].[{{Table}}]' (unique name '{{Name}}')
            new MultiSetCollArgs<{{Parent.Model}}Cdc.{{Model}}CdcCollection, {{Parent.Model}}Cdc.{{Model}}Cdc>(_{{camel Model}}CdcMapper, __result =>
            {
  {{#each JoinHierarchyReverse}}
               {{indent IndentSpaces}} foreach (var {{Alias}} in {{#if @first}}__result{{else}}{{HierarchyChild.Alias}}{{/if}}{{#unless @first}}.Coll{{/unless}}.GroupBy(x => new { {{#each OnSelectColumns}}{{#unless @last}}, {{/unless}}x.{{#if @../../first}}{{NameAlias}}{{else}}{{#if @../last}}{{NameAlias}}{{else}}{{pascal Parent.JoinTo}}_{{NameAlias}}{{/if}}{{/if}}{{/each}} }).Select(g => new { {{#each OnSelectColumns}}{{#unless @last}}, {{/unless}}g.Key.{{#if @../../first}}{{NameAlias}}{{else}}{{#if @../last}}{{NameAlias}}{{else}}{{pascal Parent.JoinTo}}_{{NameAlias}}{{/if}}{{/if}}{{/each}}, Coll = g.{{#if @last}}ToCollection<{{../Parent.Model}}Cdc.{{../Model}}CdcCollection, {{../Parent.Model}}Cdc.{{../Model}}Cdc>{{else}}ToList{{/if}}() }))
               {{indent IndentSpaces}} {
    {{#unless @last}}
               {{indent IndentSpaces}}     var {{#ifval HierarchyChild}}{{HierarchyChild.Alias}}{{else}}{{Parent.Alias}}{{/ifval}}Item = {{#ifval HierarchyChild}}{{HierarchyChild.Alias}}{{else}}{{Parent.Alias}}{{/ifval}}Coll.First(x => {{#each OnSelectColumns}}{{#unless @last}} && {{/unless}}x.{{ToColumnAlias}} == {{Parent.Alias}}.{{#if @../last}}{{ToColumnAlias}}{{else}}{{pascal Parent.JoinTo}}_{{NameAlias}}{{/if}}{{/each}}).{{Property}} ?? [];
    {{else}}
               {{indent IndentSpaces}}     {{#if @first}}{{Parent.Alias}}Coll{{else}}{{#ifnull HierarchyChild.HierarchyChild}}{{Parent.Alias}}{{else}}HierarchyChild.HierarchyChild.Alias{{/ifnull}}Item{{/if}}.Where(x => {{#each OnSelectColumns}}{{#unless @last}} && {{/unless}}x.{{ToColumnAlias}} == {{Parent.Alias}}.{{#if @../../first}}{{NameAlias}}{{else}}{{#if @../last}}{{NameAlias}}{{else}}{{pascal Parent.JoinTo}}_{{NameAlias}}{{/if}}{{/if}}{{/each}}).ForEach(x => x.{{Property}} = {{Alias}}.Coll{{#ifeq JoinCardinality 'OneToOne'}}.FirstOrDefault(){{/ifeq}});
    {{/unless}}
  {{/each}}
  {{#each JoinHierarchy}}
               {{indent IndentSpaces}} }
  {{/each}}
            }){{#if @last}}), lsnSynchronizer, cancellationToken).ConfigureAwait(false);{{else}},{{/if}}
{{/each}}

        result.Result.AddRange({{Alias}}Coll);
    }

{{else}}
    /// <inheritdoc/>
    protected override async Task GetBatchEntityDataAsync(EntityOrchestratorResult<{{Model}}CdcEnvelopeCollection, {{Model}}CdcEnvelope> result, CancellationToken cancellationToken = default)
    {
        var {{Alias}}Coll = new {{Model}}CdcEnvelopeCollection();

        await SelectQueryMultiSetAsync(result, MultiSetArgs.Create(
            // Root table: '[{{Schema}}].[{{Table}}]'
            new MultiSetCollArgs<{{Model}}CdcEnvelopeCollection, {{Model}}CdcEnvelope>(_{{camel Model}}CdcMapper, __result => {{Alias}}Coll = __result, stopOnNull: true){{#ifne CdcJoins.Count 0}},{{else}}), cancellationToken).ConfigureAwait(false);{{/ifne}}
{{#each CdcJoins}}

            // Join table: '[{{Schema}}].[{{Table}}]' (unique name '{{Name}}')
            new MultiSetCollArgs<{{Parent.Model}}Cdc.{{Model}}CdcCollection, {{Parent.Model}}Cdc.{{Model}}Cdc>(_{{camel Model}}CdcMapper, __result =>
            {
  {{#each JoinHierarchyReverse}}
               {{indent IndentSpaces}} foreach (var {{Alias}} in {{#if @first}}__result{{else}}{{HierarchyChild.Alias}}{{/if}}{{#unless @first}}.Coll{{/unless}}.GroupBy(x => new { {{#each OnSelectColumns}}{{#unless @last}}, {{/unless}}x.{{#if @../../first}}{{NameAlias}}{{else}}{{#if @../last}}{{NameAlias}}{{else}}{{pascal Parent.JoinTo}}_{{NameAlias}}{{/if}}{{/if}}{{/each}} }).Select(g => new { {{#each OnSelectColumns}}{{#unless @last}}, {{/unless}}g.Key.{{#if @../../first}}{{NameAlias}}{{else}}{{#if @../last}}{{NameAlias}}{{else}}{{pascal Parent.JoinTo}}_{{NameAlias}}{{/if}}{{/if}}{{/each}}, Coll = g.{{#if @last}}ToCollection<{{../Parent.Model}}Cdc.{{../Model}}CdcCollection, {{../Parent.Model}}Cdc.{{../Model}}Cdc>{{else}}ToList{{/if}}() }))
               {{indent IndentSpaces}} {
    {{#unless @last}}
               {{indent IndentSpaces}}     var {{#ifval HierarchyChild}}{{HierarchyChild.Alias}}{{else}}{{Parent.Alias}}{{/ifval}}Item = {{#ifval HierarchyChild}}{{HierarchyChild.Alias}}{{else}}{{Parent.Alias}}{{/ifval}}Coll.First(x => {{#each OnSelectColumns}}{{#unless @last}} && {{/unless}}x.{{ToColumnAlias}} == {{Parent.Alias}}.{{#if @../last}}{{ToColumnAlias}}{{else}}{{pascal Parent.JoinTo}}_{{NameAlias}}{{/if}}{{/each}}).{{Property}} ?? [];
    {{else}}
               {{indent IndentSpaces}}     {{#if @first}}{{Parent.Alias}}Coll{{else}}{{#ifnull HierarchyChild.HierarchyChild}}{{Parent.Alias}}{{else}}HierarchyChild.HierarchyChild.Alias{{/ifnull}}Item{{/if}}.Where(x => {{#each OnSelectColumns}}{{#unless @last}} && {{/unless}}x.{{ToColumnAlias}} == {{Parent.Alias}}.{{#if @../../first}}{{NameAlias}}{{else}}{{#if @../last}}{{NameAlias}}{{else}}{{pascal Parent.JoinTo}}_{{NameAlias}}{{/if}}{{/if}}{{/each}}).ForEach(x => x.{{Property}} = {{Alias}}.Coll{{#ifeq JoinCardinality 'OneToOne'}}.FirstOrDefault(){{/ifeq}});
    {{/unless}}
  {{/each}}
  {{#each JoinHierarchy}}
               {{indent IndentSpaces}} }
  {{/each}}
            }){{#if @last}}), cancellationToken).ConfigureAwait(false);{{else}},{{/if}}
{{/each}}

        result.Result.AddRange({{Alias}}Coll);
    }

{{/if}}
    /// <inheritdoc/>
    protected override string EventSubject => "{{#ifval Root.EventSubjectRoot}}{{Root.EventSubjectRoot}}.{{/ifval}}{{EventSubject}}";

    /// <inheritdoc/>
    protected override EventSubjectFormat EventSubjectFormat => EventSubjectFormat.{{EventSubjectFormat}};

    /// <inheritdoc/>
    protected override EventActionFormat EventActionFormat => EventActionFormat.{{Root.EventActionFormat}};

    /// <inheritdoc/>
    protected override string? EventType => "{{#ifval Root.EventTypeRoot}}{{Root.EventTypeRoot}}.{{/ifval}}{{EventType}}";

{{#ifne Root.EventSourceKind 'None'}}
    /// <inheritdoc/>
    protected override Uri? EventSource => new("{{EventSourceUri}}", UriKind.{{Root.EventSourceKind}});

    /// <inheritdoc/>
    protected override EventSourceFormat EventSourceFormat { get; } = EventSourceFormat.{{EventSourceFormat}};

{{/ifne}}
{{#ifne ExcludePropertiesFromETag.Count 0}}
    /// <inheritdoc/>
    protected override string[]? ExcludePropertiesFromETag => [{{#each ExcludePropertiesFromETag}}"{{.}}"{{#unless @last}}, {{/unless}}{{/each}}];

{{/ifne}}
{{#if Root.UseSidecar}}
    /// <summary>
    /// Executes explicit orchestation for the specified keys bypassing CDC (Change Data Capture) and <see cref="BatchTracker"/>.
    /// </summary>
    /// <param name="{{camel Name}}Keys">The '{{pascal Name}}' database primary keys (as defined by <see cref="{{Model}}CdcMapper.DatabaseInfo"/>).</param>
  {{#each CdcJoins}}
    /// <param name="{{camel Name}}Keys">The '{{pascal Name}}' database primary keys (as defined by <see cref="{{Model}}CdcMapper.DatabaseInfo"/>).</param>
  {{/each}}
    /// <param name="options">The <see cref="ExplicitOptions"/>.</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/>.</param>
    /// <returns>The <see cref="EntityOrchestratorResult"/>.</returns>
    /// <remarks><b>Note:</b> Explicit orchestrations bypass CDC (Change Data Capture) therefore access to <i>physically deleted</i> data is unreliable especially with respect to any child tables as there is no means to walk back up the join hierarchy.
    /// Only a delete from the root table can be inferred by its current non-existence. Provide <paramref name="options"/> to control the underlying behavior.</remarks>
    public Task<EntityOrchestratorResult> ExecuteExplicitAsync(IEnumerable<CompositeKey>? {{camel Name}}Keys, {{#each CdcJoins}}IEnumerable<CompositeKey>? {{camel Name}}Keys = default, {{/each}}ExplicitOptions? options = null, CancellationToken cancellationToken = default) 
    {
        CheckAtLeastASingleKey({{camel Name}}Keys{{#each CdcJoins}}, {{camel Name}}Keys{{/each}});

        var cmd = Database.SqlFromResource("Resources.Generated.{{Model}}ExecuteExplicit.sql")
            .Param("{{Name}}KeysList", CreateJsonForKeys({{Model}}CdcMapper.DatabaseInfo, {{camel Name}}Keys)){{#ifeq CdcJoins.Count 0}};{{/ifeq}}
  {{#each CdcJoins}}
            .Param("{{Name}}KeysList", CreateJsonForKeys({{Model}}CdcMapper.DatabaseInfo, {{camel Name}}Keys)){{#if @last}};{{/if}}
  {{/each}}

        return ExecuteExplicitAsync(cmd, options, cancellationToken);
    }

{{/if}}
    /// <summary>
    /// Represents a <see cref="{{Model}}Cdc"/> envelope to append the required (additional) database properties.
    /// </summary>
    public class {{Model}}CdcEnvelope : {{Model}}Cdc, IEntityEnvelope
    {
        /// <inheritdoc/>
        [JsonIgnore]
        public CdcOperationType DatabaseOperationType { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        public byte[] DatabaseLsn { get; set; } = [];

        /// <inheritdoc/>
        [JsonIgnore]
        public string? DatabaseTrackingHash { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        public bool IsDatabasePhysicallyDeleted { get; set; }
    }

    /// <summary>
    /// Represents a <see cref="{{Model}}CdcEnvelope"/> collection.
    /// </summary>
    public class {{Model}}CdcEnvelopeCollection : List<{{Model}}CdcEnvelope> { }

    /// <summary>
    /// Represents a <see cref="{{Model}}Cdc"/> database mapper.
    /// </summary>
    public class {{Model}}CdcMapper : IDatabaseMapper<{{Model}}CdcEnvelope>, IDatabaseInfo
    {
        /// <inheritdoc/>
        public static DatabaseInfo DatabaseInfo => new("{{Schema}}", "{{Table}}", [{{#each PrimaryKeyColumns}}"{{pascal NameAlias}}"{{#unless @last}}, {{/unless}}{{/each}}]);

        /// <inheritdoc/>
        public {{Model}}CdcEnvelope? MapFromDb(DatabaseRecord record, OperationTypes operationType) => new()
        {
{{#if Root.UseSidecar}}
  {{#each ColumnsExcludeMapping}}
            {{pascal NameAlias}} = record.GetValue<{{DotNetType}}{{#if IsDotNetNullable}}?{{/if}}>("{{pascal NameAlias}}"),
  {{/each}}
{{else}}
  {{#if IdentifierMapping}}
            GlobalId = record.GetValue<{{Root.IdentifierMappingDotNetType}}?>("GlobalId"),
  {{/if}}
  {{#each SelectedEntityColumns}}
            {{pascal NameAlias}} = record.GetValue<{{DotNetType}}{{#if IsDotNetNullable}}?{{/if}}>("{{pascal NameAlias}}"),
  {{/each}}
{{/if}}
{{#each JoinNonCdcChildren}}
  {{#each Columns}}
            {{pascal NameAlias}} = record.GetValue<{{DotNetType}}{{#if IsDotNetNullable}}?{{/if}}>("{{pascal NameAlias}}"),
  {{/each}}
{{/each}}
            DatabaseOperationType = record.GetValue<CdcOperationType>(CdcOperationTypeColumnName),
            DatabaseLsn = record.GetValue<byte[]>(CdcLsnColumnName),
{{#unless Root.UseSidecar}}
            DatabaseTrackingHash = record.GetValue<string?>(TrackingHashColumnName),
{{/unless}}
            IsDatabasePhysicallyDeleted = record.GetValue<bool>(IsPhysicallyDeletedColumnName)
        };

        /// <inheritdoc/>
        void IDatabaseMapper<{{Model}}CdcEnvelope>.MapToDb({{Model}}CdcEnvelope? value, DatabaseParameterCollection parameters, OperationTypes operationType) => throw new NotImplementedException();
    }
{{#each DistinctModels}}

    /// <summary>
    /// Represents a <see cref="{{Model}}Cdc"/> database mapper.
    /// </summary>
    public class {{Model}}CdcMapper : IDatabaseMapper<{{Parent.Model}}Cdc.{{Model}}Cdc>, IDatabaseInfo
    {
        /// <inheritdoc/>
        public static DatabaseInfo DatabaseInfo => new("{{Schema}}", "{{Table}}", [{{#each PrimaryKeyColumns}}"{{pascal NameAlias}}"{{#unless @last}}, {{/unless}}{{/each}}]);

        /// <inheritdoc/>
        public {{Parent.Model}}Cdc.{{Model}}Cdc? MapFromDb(DatabaseRecord record, OperationTypes operationType) => new()
        {
  {{#each JoinHierarchyReverse}}
    {{#unless @last}}
      {{#each OnSelectColumns}}
            {{pascal Parent.JoinTo}}_{{NameAlias}} = record.GetValue<{{ToDbColumn.DotNetType}}>("{{pascal Parent.JoinTo}}_{{NameAlias}}"),
      {{/each}}
    {{/unless}}
  {{/each}}
  {{#if Root.UseSidecar}}
    {{#each ColumnsExcludeMapping}}
            {{pascal NameAlias}} = record.GetValue<{{DotNetType}}{{#if IsDotNetNullable}}?{{/if}}>("{{pascal NameAlias}}"){{#unless @last}},{{else}}{{#ifne Parent.JoinNonCdcChildren.Count 0}},{{/ifne}}{{/unless}}
    {{/each}}
  {{else}}
    {{#each Columns}}
            {{pascal NameAlias}} = record.GetValue<{{DotNetType}}{{#if IsDotNetNullable}}?{{/if}}>("{{pascal NameAlias}}"){{#unless @last}},{{else}}{{#ifne Parent.JoinNonCdcChildren.Count 0}},{{/ifne}}{{/unless}}
    {{/each}}
  {{/if}}
  {{#each JoinNonCdcChildren}}
    {{#each Columns}}
            {{pascal NameAlias}} = record.GetValue<{{DotNetType}}{{#if IsDotNetNullable}}?{{/if}}>("{{pascal NameAlias}}"){{#unless @last}},{{else}}{{#unless ../@last}},{{/unless}}{{/unless}}
    {{/each}}
  {{/each}}
        };

        /// <inheritdoc/>
        void IDatabaseMapper<{{Parent.Model}}Cdc.{{Model}}Cdc>.MapToDb({{Parent.Model}}Cdc.{{Model}}Cdc? value, DatabaseParameterCollection parameters, OperationTypes operationType) => throw new NotImplementedException();
    }
{{/each}}
{{#if Root.UseSidecar}}

    /// <summary>
    /// Represents the '{{Model}}'-specific <see cref="BatchTracker"/>.
    /// </summary>
    public class {{Model}}BatchTracker : BatchTracker
    {
        /// <summary>
        /// Gets or sets the '{{Model}}' minimum LSN (Log Sequence Number).
        /// </summary>
        public byte[]? {{Model}}MinLsn { get; set; }

        /// <summary>
        /// Gets or sets the '{{Model}}' maximum LSN (Log Sequence Number).
        /// </summary>
        public byte[]? {{Model}}MaxLsn { get; set; }
{{#each DistinctModels}}

        /// <summary>
        /// Gets or sets the '{{Model}}' minimum LSN (Log Sequence Number).
        /// </summary>
        public byte[]? {{Model}}MinLsn { get; set; }

        /// <summary>
        /// Gets or sets the '{{Model}}' maximum LSN (Log Sequence Number).
        /// </summary>
        public byte[]? {{Model}}MaxLsn { get; set; }
{{/each}}
    }

    /// <summary>
    /// Represents the <see cref="{{Model}}BatchTracker"/> database mapper.
    /// </summary>
    public class {{Model}}BatchTrackerMapper : DatabaseMapperEx<{{Model}}BatchTracker>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="{{Model}}BatchTrackerMapper"/> class.
        /// </summary>
        public {{Model}}BatchTrackerMapper() => InheritMapper(BatchTrackerMapper.Default);

        /// <inheritdoc/>
        protected override void OnMapFromDb(DatabaseRecord record, {{Model}}BatchTracker value, OperationTypes operationType)
        {
            value.{{Model}}MinLsn = record.GetValue<byte[]?>("{{pascal Name}}MinLsn");
            value.{{Model}}MaxLsn = record.GetValue<byte[]?>("{{pascal Name}}MaxLsn");
{{#each DistinctModels}}
            value.{{Model}}MinLsn = record.GetValue<byte[]?>("{{pascal Name}}MinLsn");
            value.{{Model}}MaxLsn = record.GetValue<byte[]?>("{{pascal Name}}MaxLsn");
{{/each}}
        }

        /// <inheritdoc/>
        protected override void OnMapToDb({{Model}}BatchTracker value, DatabaseParameterCollection parameters, OperationTypes operationType)
        {
            parameters.AddParameter("{{pascal Name}}MinLsn", value.{{Model}}MinLsn, dbType: System.Data.DbType.Binary);
            parameters.AddParameter("{{pascal Name}}MaxLsn", value.{{Model}}MaxLsn, dbType: System.Data.DbType.Binary);
{{#each DistinctModels}}
            parameters.AddParameter("{{pascal Name}}MinLsn", value.{{Model}}MinLsn, dbType: System.Data.DbType.Binary);
            parameters.AddParameter("{{pascal Name}}MaxLsn", value.{{Model}}MaxLsn, dbType: System.Data.DbType.Binary);
{{/each}}
        }
    }
{{/if}}
}