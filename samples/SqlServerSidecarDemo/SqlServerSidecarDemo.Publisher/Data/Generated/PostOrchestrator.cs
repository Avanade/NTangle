/*
 * This file is automatically generated; any changes will be lost. 
 */

namespace SqlServerSidecarDemo.Publisher.Data;

/// <summary>
/// Enables the Change Data Capture (CDC) <see cref="PostCdc"/> entity (aggregate root) orchestration (database table '[Legacy].[Posts]').
/// </summary>
public partial interface IPostOrchestrator : IEntityOrchestrator<PostCdc> { }

/// <summary>
/// Manages the Change Data Capture (CDC) <see cref="PostCdc"/> entity (aggregate root) orchestration (database table '[Legacy].[Posts]').
/// </summary>
public partial class PostOrchestrator : EntitySidecarOrchestrator<PostCdc, PostOrchestrator.PostCdcEnvelopeCollection, PostOrchestrator.PostCdcEnvelope, PostOrchestrator.PostBatchTracker, PostOrchestrator.PostBatchTrackerMapper>, IPostOrchestrator
{
    private static readonly PostCdcMapper _postCdcMapper = new();
    private static readonly CommentCdcMapper _commentCdcMapper = new();
    private static readonly CommentsTagsCdcMapper _commentsTagsCdcMapper = new();
    private static readonly PostsTagsCdcMapper _postsTagsCdcMapper = new();

    /// <summary>
    /// Initializes a new instance of the <see cref="PostOrchestrator"/> class.
    /// </summary>
    /// <param name="database">The primary <see cref="IDatabase"/>.</param>
    /// <param name="sidecarDatabase">The sidecar <see cref="ISidecarDatabase"/>.</param>
    /// <param name="eventPublisher">The <see cref="IEventPublisher"/>.</param>
    /// <param name="jsonSerializer">The <see cref="IJsonSerializer"/>.</param>
    /// <param name="settings">The <see cref="SettingsBase"/>.</param>
    /// <param name="logger">The <see cref="ILogger"/>.</param>
    public PostOrchestrator(IDatabase database, ISidecarDatabase sidecarDatabase, IEventPublisher eventPublisher, IJsonSerializer jsonSerializer, SettingsBase settings, ILogger<PostOrchestrator> logger)
        : base(database, sidecarDatabase, eventPublisher, jsonSerializer, settings, logger) => PostOrchestratorCtor();

    partial void PostOrchestratorCtor(); // Enables additional functionality to be added to the constructor.

    /// <inheritdoc/>
    protected override string ExecuteStoredProcedureName => "[NTangle].[spPostsBatchExecute]";

    /// <inheritdoc/>
    protected override string CompleteStoredProcedureName => "[NTangle].[spPostsBatchComplete]";

    /// <inheritdoc/>
    protected override string ExecuteCdcSqlResourceName => "Resources.Generated.PostExecuteBatch.sql";

    /// <inheritdoc/>
    protected override string TrackingStoredProcedureName => "[NTangle].[spPostsBatchTracking]";

    /// <inheritdoc/>
    protected override async Task GetBatchEntityDataAsync(EntityOrchestratorResult<PostCdcEnvelopeCollection, PostCdcEnvelope> result, DatabaseCommand? databaseCommand = null, CancellationToken cancellationToken = default)
    {
        static void lsnSynchronizer(DatabaseRecord dr, PostBatchTracker bt)
        {
            bt.PostMinLsn = dr.GetValue<byte[]>("PostsMinLsn");
            bt.PostMaxLsn = dr.GetValue<byte[]>("PostsMaxLsn");
            bt.CommentMinLsn = dr.GetValue<byte[]>("CommentsMinLsn");
            bt.CommentMaxLsn = dr.GetValue<byte[]>("CommentsMaxLsn");
            bt.CommentsTagsMinLsn = dr.GetValue<byte[]>("CommentsTagsMinLsn");
            bt.CommentsTagsMaxLsn = dr.GetValue<byte[]>("CommentsTagsMaxLsn");
            bt.PostsTagsMinLsn = dr.GetValue<byte[]>("PostsTagsMinLsn");
            bt.PostsTagsMaxLsn = dr.GetValue<byte[]>("PostsTagsMaxLsn");
        }

        var pColl = new PostCdcEnvelopeCollection();

        await SelectQueryMultiSetAsync(result, databaseCommand, MultiSetArgs.Create(
            // Root table: '[Legacy].[Posts]'
            new MultiSetCollArgs<PostCdcEnvelopeCollection, PostCdcEnvelope>(_postCdcMapper, __result => pColl = __result, stopOnNull: true),

            // Join table: '[Legacy].[Comments]' (unique name 'Comments')
            new MultiSetCollArgs<PostCdc.CommentCdcCollection, PostCdc.CommentCdc>(_commentCdcMapper, __result =>
            {
                foreach (var c in __result.GroupBy(x => new { x.PostsId }).Select(g => new { g.Key.PostsId, Coll = g.ToCollection<PostCdc.CommentCdcCollection, PostCdc.CommentCdc>() }))
                {
                    pColl.Where(x => x.PostsId == c.PostsId).ForEach(x => x.Comments = c.Coll);
                }
            }),

            // Join table: '[Legacy].[Tags]' (unique name 'CommentsTags')
            new MultiSetCollArgs<PostCdc.CommentsTagsCdcCollection, PostCdc.CommentsTagsCdc>(_commentsTagsCdcMapper, __result =>
            {
                foreach (var c in __result.GroupBy(x => new { x.Posts_PostsId }).Select(g => new { g.Key.Posts_PostsId, Coll = g.ToList() }))
                {
                    var pItem = pColl.First(x => x.PostsId == c.Posts_PostsId).Comments ?? [];
                    foreach (var ct in c.Coll.GroupBy(x => new { x.ParentId }).Select(g => new { g.Key.ParentId, Coll = g.ToCollection<PostCdc.CommentsTagsCdcCollection, PostCdc.CommentsTagsCdc>() }))
                    {
                        pItem.Where(x => x.CommentsId == ct.ParentId).ForEach(x => x.Tags = ct.Coll);
                    }
                }
            }),

            // Join table: '[Legacy].[Tags]' (unique name 'PostsTags')
            new MultiSetCollArgs<PostCdc.PostsTagsCdcCollection, PostCdc.PostsTagsCdc>(_postsTagsCdcMapper, __result =>
            {
                foreach (var pt in __result.GroupBy(x => new { x.PostsId }).Select(g => new { g.Key.PostsId, Coll = g.ToCollection<PostCdc.PostsTagsCdcCollection, PostCdc.PostsTagsCdc>() }))
                {
                    pColl.Where(x => x.PostsId == pt.PostsId).ForEach(x => x.Tags = pt.Coll);
                }
            })), lsnSynchronizer, cancellationToken).ConfigureAwait(false);

        result.Result.AddRange(pColl);
    }

    /// <inheritdoc/>
    protected override string EventSubject => "Legacy.Post";

    /// <inheritdoc/>
    protected override EventSubjectFormat EventSubjectFormat => EventSubjectFormat.NameAndKey;

    /// <inheritdoc/>
    protected override EventActionFormat EventActionFormat => EventActionFormat.PastTense;

    /// <inheritdoc/>
    protected override string? EventType => "Legacy.Post";

    /// <inheritdoc/>
    protected override Uri? EventSource => new("/database/cdc/legacy/posts", UriKind.Relative);

    /// <inheritdoc/>
    protected override EventSourceFormat EventSourceFormat { get; } = EventSourceFormat.NameOnly;

    /// <summary>
    /// Executes explicit orchestation for the specified keys bypassing CDC (Change Data Capture) and <see cref="BatchTracker"/>.
    /// </summary>
    /// <param name="postsKeys">The 'Posts' database primary keys (as defined by <see cref="PostCdcMapper.DatabaseInfo"/>).</param>
    /// <param name="commentsKeys">The 'Comments' database primary keys (as defined by <see cref="CommentCdcMapper.DatabaseInfo"/>).</param>
    /// <param name="commentsTagsKeys">The 'CommentsTags' database primary keys (as defined by <see cref="CommentsTagsCdcMapper.DatabaseInfo"/>).</param>
    /// <param name="postsTagsKeys">The 'PostsTags' database primary keys (as defined by <see cref="PostsTagsCdcMapper.DatabaseInfo"/>).</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/>.</param>
    /// <returns>The <see cref="EntityOrchestratorResult"/>.</returns>
    public Task<EntityOrchestratorResult> ExecuteExplicitAsync(IEnumerable<CompositeKey>? postsKeys, IEnumerable<CompositeKey>? commentsKeys = default, IEnumerable<CompositeKey>? commentsTagsKeys = default, IEnumerable<CompositeKey>? postsTagsKeys = default, CancellationToken cancellationToken = default) 
    {
        CheckAtLeastASingleKey(postsKeys, commentsKeys, commentsTagsKeys, postsTagsKeys);

        var cmd = Database.SqlFromResource("Resources.Generated.PostExecuteExplicit.sql")
            .Param("PostsKeysList", CreateJsonForKeys(PostCdcMapper.DatabaseInfo, postsKeys))
            .Param("CommentsKeysList", CreateJsonForKeys(CommentCdcMapper.DatabaseInfo, commentsKeys))
            .Param("CommentsTagsKeysList", CreateJsonForKeys(CommentsTagsCdcMapper.DatabaseInfo, commentsTagsKeys))
            .Param("PostsTagsKeysList", CreateJsonForKeys(PostsTagsCdcMapper.DatabaseInfo, postsTagsKeys));

        return ExecuteExplicitAsync(cmd, cancellationToken);
    }

    /// <summary>
    /// Represents a <see cref="PostCdc"/> envelope to append the required (additional) database properties.
    /// </summary>
    public class PostCdcEnvelope : PostCdc, IEntityEnvelope
    {
        /// <inheritdoc/>
        [JsonIgnore]
        public CdcOperationType DatabaseOperationType { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        public byte[] DatabaseLsn { get; set; } = [];

        /// <inheritdoc/>
        [JsonIgnore]
        public string? DatabaseTrackingHash { get; set; }

        /// <inheritdoc/>
        [JsonIgnore]
        public bool IsDatabasePhysicallyDeleted { get; set; }
    }

    /// <summary>
    /// Represents a <see cref="PostCdcEnvelope"/> collection.
    /// </summary>
    public class PostCdcEnvelopeCollection : List<PostCdcEnvelope> { }

    /// <summary>
    /// Represents a <see cref="PostCdc"/> database mapper.
    /// </summary>
    public class PostCdcMapper : IDatabaseMapper<PostCdcEnvelope>, IDatabaseInfo
    {
        /// <inheritdoc/>
        public static DatabaseInfo DatabaseInfo => new("Legacy", "Posts", ["PostsId"]);

        /// <inheritdoc/>
        public PostCdcEnvelope? MapFromDb(DatabaseRecord record, OperationTypes operationType) => new()
        {
            PostsId = record.GetValue<int>("PostsId"),
            Text = record.GetValue<string?>("Text"),
            Date = record.GetValue<DateTime?>("Date"),
            DatabaseOperationType = record.GetValue<CdcOperationType>(CdcOperationTypeColumnName),
            DatabaseLsn = record.GetValue<byte[]>(CdcLsnColumnName),
            IsDatabasePhysicallyDeleted = record.GetValue<bool>(IsPhysicallyDeletedColumnName)
        };

        /// <inheritdoc/>
        void IDatabaseMapper<PostCdcEnvelope>.MapToDb(PostCdcEnvelope? value, DatabaseParameterCollection parameters, OperationTypes operationType) => throw new NotImplementedException();
    }

    /// <summary>
    /// Represents a <see cref="CommentCdc"/> database mapper.
    /// </summary>
    public class CommentCdcMapper : IDatabaseMapper<PostCdc.CommentCdc>, IDatabaseInfo
    {
        /// <inheritdoc/>
        public static DatabaseInfo DatabaseInfo => new("Legacy", "Comments", ["CommentsId"]);

        /// <inheritdoc/>
        public PostCdc.CommentCdc? MapFromDb(DatabaseRecord record, OperationTypes operationType) => new()
        {
            CommentsId = record.GetValue<int>("CommentsId"),
            PostsId = record.GetValue<int>("PostsId"),
            Text = record.GetValue<string?>("Text"),
            Date = record.GetValue<DateTime?>("Date")
        };

        /// <inheritdoc/>
        void IDatabaseMapper<PostCdc.CommentCdc>.MapToDb(PostCdc.CommentCdc? value, DatabaseParameterCollection parameters, OperationTypes operationType) => throw new NotImplementedException();
    }

    /// <summary>
    /// Represents a <see cref="CommentsTagsCdc"/> database mapper.
    /// </summary>
    public class CommentsTagsCdcMapper : IDatabaseMapper<PostCdc.CommentsTagsCdc>, IDatabaseInfo
    {
        /// <inheritdoc/>
        public static DatabaseInfo DatabaseInfo => new("Legacy", "Tags", ["TagsId"]);

        /// <inheritdoc/>
        public PostCdc.CommentsTagsCdc? MapFromDb(DatabaseRecord record, OperationTypes operationType) => new()
        {
            Posts_PostsId = record.GetValue<int>("Posts_PostsId"),
            TagsId = record.GetValue<int>("TagsId"),
            ParentType = record.GetValue<string?>("ParentType"),
            ParentId = record.GetValue<int>("ParentId"),
            Text = record.GetValue<string?>("Text")
        };

        /// <inheritdoc/>
        void IDatabaseMapper<PostCdc.CommentsTagsCdc>.MapToDb(PostCdc.CommentsTagsCdc? value, DatabaseParameterCollection parameters, OperationTypes operationType) => throw new NotImplementedException();
    }

    /// <summary>
    /// Represents a <see cref="PostsTagsCdc"/> database mapper.
    /// </summary>
    public class PostsTagsCdcMapper : IDatabaseMapper<PostCdc.PostsTagsCdc>, IDatabaseInfo
    {
        /// <inheritdoc/>
        public static DatabaseInfo DatabaseInfo => new("Legacy", "Tags", ["TagsId"]);

        /// <inheritdoc/>
        public PostCdc.PostsTagsCdc? MapFromDb(DatabaseRecord record, OperationTypes operationType) => new()
        {
            TagsId = record.GetValue<int>("TagsId"),
            ParentType = record.GetValue<string?>("ParentType"),
            PostsId = record.GetValue<int>("PostsId"),
            Text = record.GetValue<string?>("Text")
        };

        /// <inheritdoc/>
        void IDatabaseMapper<PostCdc.PostsTagsCdc>.MapToDb(PostCdc.PostsTagsCdc? value, DatabaseParameterCollection parameters, OperationTypes operationType) => throw new NotImplementedException();
    }

    /// <summary>
    /// Represents the 'Post'-specific <see cref="BatchTracker"/>.
    /// </summary>
    public class PostBatchTracker : BatchTracker
    {
        /// <summary>
        /// Gets or sets the 'Post' minimum LSN (Log Sequence Number).
        /// </summary>
        public byte[]? PostMinLsn { get; set; }

        /// <summary>
        /// Gets or sets the 'Post' maximum LSN (Log Sequence Number).
        /// </summary>
        public byte[]? PostMaxLsn { get; set; }

        /// <summary>
        /// Gets or sets the 'Comment' minimum LSN (Log Sequence Number).
        /// </summary>
        public byte[]? CommentMinLsn { get; set; }

        /// <summary>
        /// Gets or sets the 'Comment' maximum LSN (Log Sequence Number).
        /// </summary>
        public byte[]? CommentMaxLsn { get; set; }

        /// <summary>
        /// Gets or sets the 'CommentsTags' minimum LSN (Log Sequence Number).
        /// </summary>
        public byte[]? CommentsTagsMinLsn { get; set; }

        /// <summary>
        /// Gets or sets the 'CommentsTags' maximum LSN (Log Sequence Number).
        /// </summary>
        public byte[]? CommentsTagsMaxLsn { get; set; }

        /// <summary>
        /// Gets or sets the 'PostsTags' minimum LSN (Log Sequence Number).
        /// </summary>
        public byte[]? PostsTagsMinLsn { get; set; }

        /// <summary>
        /// Gets or sets the 'PostsTags' maximum LSN (Log Sequence Number).
        /// </summary>
        public byte[]? PostsTagsMaxLsn { get; set; }
    }

    /// <summary>
    /// Represents the <see cref="PostBatchTracker"/> database mapper.
    /// </summary>
    public class PostBatchTrackerMapper : DatabaseMapperEx<PostBatchTracker>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostBatchTrackerMapper"/> class.
        /// </summary>
        public PostBatchTrackerMapper() => InheritMapper(BatchTrackerMapper.Default);

        /// <inheritdoc/>
        protected override void OnMapFromDb(DatabaseRecord record, PostBatchTracker value, OperationTypes operationType)
        {
            value.PostMinLsn = record.GetValue<byte[]?>("PostsMinLsn");
            value.PostMaxLsn = record.GetValue<byte[]?>("PostsMaxLsn");
            value.CommentMinLsn = record.GetValue<byte[]?>("CommentsMinLsn");
            value.CommentMaxLsn = record.GetValue<byte[]?>("CommentsMaxLsn");
            value.CommentsTagsMinLsn = record.GetValue<byte[]?>("CommentsTagsMinLsn");
            value.CommentsTagsMaxLsn = record.GetValue<byte[]?>("CommentsTagsMaxLsn");
            value.PostsTagsMinLsn = record.GetValue<byte[]?>("PostsTagsMinLsn");
            value.PostsTagsMaxLsn = record.GetValue<byte[]?>("PostsTagsMaxLsn");
        }

        /// <inheritdoc/>
        protected override void OnMapToDb(PostBatchTracker value, DatabaseParameterCollection parameters, OperationTypes operationType)
        {
            parameters.AddParameter("PostsMinLsn", value.PostMinLsn, dbType: System.Data.DbType.Binary);
            parameters.AddParameter("PostsMaxLsn", value.PostMaxLsn, dbType: System.Data.DbType.Binary);
            parameters.AddParameter("CommentsMinLsn", value.CommentMinLsn, dbType: System.Data.DbType.Binary);
            parameters.AddParameter("CommentsMaxLsn", value.CommentMaxLsn, dbType: System.Data.DbType.Binary);
            parameters.AddParameter("CommentsTagsMinLsn", value.CommentsTagsMinLsn, dbType: System.Data.DbType.Binary);
            parameters.AddParameter("CommentsTagsMaxLsn", value.CommentsTagsMaxLsn, dbType: System.Data.DbType.Binary);
            parameters.AddParameter("PostsTagsMinLsn", value.PostsTagsMinLsn, dbType: System.Data.DbType.Binary);
            parameters.AddParameter("PostsTagsMaxLsn", value.PostsTagsMaxLsn, dbType: System.Data.DbType.Binary);
        }
    }
}