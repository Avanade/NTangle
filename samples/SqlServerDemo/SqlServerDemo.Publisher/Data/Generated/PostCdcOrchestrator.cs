/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using CoreEx;
using CoreEx.Database;
using CoreEx.Entities;
using CoreEx.Events;
using CoreEx.Json;
using CoreEx.Mapping;
using Microsoft.Extensions.Logging;
using NTangle;
using NTangle.Cdc;
using NTangle.Data;
using NTangle.Events;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;
using SqlServerDemo.Publisher.Entities;

namespace SqlServerDemo.Publisher.Data
{
    /// <summary>
    /// Enables the Change Data Capture (CDC) <see cref="PostCdc"/> entity (aggregate root) orchestration (database table '[Legacy].[Posts]').
    /// </summary>
    public partial interface IPostCdcOrchestrator : IEntityOrchestrator<PostCdc> { }

    /// <summary>
    /// Manages the Change Data Capture (CDC) <see cref="PostCdc"/> entity (aggregate root) orchestration (database table '[Legacy].[Posts]').
    /// </summary>
    public partial class PostCdcOrchestrator : EntityOrchestrator<PostCdc, PostCdcOrchestrator.PostCdcEnvelopeCollection, PostCdcOrchestrator.PostCdcEnvelope, VersionTrackingMapper>, IPostCdcOrchestrator
    {
        private static readonly PostCdcMapper _postCdcMapper = new PostCdcMapper();
        private static readonly CommentCdcMapper _commentCdcMapper = new CommentCdcMapper();
        private static readonly CommentsTagsCdcMapper _commentsTagsCdcMapper = new CommentsTagsCdcMapper();
        private static readonly PostsTagsCdcMapper _postsTagsCdcMapper = new PostsTagsCdcMapper();

        /// <summary>
        /// Initializes a new instance of the <see cref="PostCdcOrchestrator"/> class.
        /// </summary>
        /// <param name="db">The <see cref="IDatabase"/>.</param>
        /// <param name="eventPublisher">The <see cref="IEventPublisher"/>.</param>
        /// <param name="jsonSerializer">The <see cref="IJsonSerializer"/>.</param>
        /// <param name="logger">The <see cref="ILogger"/>.</param>
        public PostCdcOrchestrator(IDatabase db, IEventPublisher eventPublisher, IJsonSerializer jsonSerializer, ILogger<PostCdcOrchestrator> logger) :
            base(db, "[NTangle].[spPostsBatchExecute]", "[NTangle].[spPostsBatchComplete]", eventPublisher, jsonSerializer, logger) => PostCdcOrchestratorCtor();

        partial void PostCdcOrchestratorCtor(); // Enables additional functionality to be added to the constructor.

        /// <inheritdoc/>
        protected override async Task<EntityOrchestratorResult<PostCdcEnvelopeCollection, PostCdcEnvelope>> GetBatchEntityDataAsync(CancellationToken cancellationToken = default)
        {
            var pColl = new PostCdcEnvelopeCollection();

            var result = await SelectQueryMultiSetAsync(MultiSetArgs.Create(
                // Root table: '[Legacy].[Posts]'
                new MultiSetCollArgs<PostCdcEnvelopeCollection, PostCdcEnvelope>(_postCdcMapper, r => pColl = r, stopOnNull: true),

                // Join table: '[Legacy].[Comments]' (unique name 'Comments')
                new MultiSetCollArgs<PostCdc.CommentCdcCollection, PostCdc.CommentCdc>(_commentCdcMapper, r =>
                {
                    foreach (var c in r.GroupBy(x => new { x.PostsId }).Select(g => new { g.Key.PostsId, Coll = g.ToCollection<PostCdc.CommentCdcCollection, PostCdc.CommentCdc>() }))
                    {
                        pColl.Where(x => x.PostsId == c.PostsId).ForEach(x => x.Comments = c.Coll);
                    }
                }),

                // Join table: '[Legacy].[Tags]' (unique name 'CommentsTags')
                new MultiSetCollArgs<PostCdc.CommentsTagsCdcCollection, PostCdc.CommentsTagsCdc>(_commentsTagsCdcMapper, r =>
                {
                    foreach (var c in r.GroupBy(x => new { x.Posts_PostsId }).Select(g => new { g.Key.Posts_PostsId, Coll = g.ToList() }))
                    {
                        var pItem = pColl.First(x => x.PostsId == c.Posts_PostsId).Comments;
                        foreach (var ct in c.Coll.GroupBy(x => new { x.ParentId }).Select(g => new { g.Key.ParentId, Coll = g.ToCollection<PostCdc.CommentsTagsCdcCollection, PostCdc.CommentsTagsCdc>() }))
                        {
                            pItem.Where(x => x.CommentsId == ct.ParentId).ForEach(x => x.Tags = ct.Coll);
                        }
                    }
                }),

                // Join table: '[Legacy].[Tags]' (unique name 'PostsTags')
                new MultiSetCollArgs<PostCdc.PostsTagsCdcCollection, PostCdc.PostsTagsCdc>(_postsTagsCdcMapper, r =>
                {
                    foreach (var pt in r.GroupBy(x => new { x.PostsId }).Select(g => new { g.Key.PostsId, Coll = g.ToCollection<PostCdc.PostsTagsCdcCollection, PostCdc.PostsTagsCdc>() }))
                    {
                        pColl.Where(x => x.PostsId == pt.PostsId).ForEach(x => x.Tags = pt.Coll);
                    }
                })), cancellationToken).ConfigureAwait(false);

            result.Result.AddRange(pColl);
            return result;
        }

        /// <inheritdoc/>
        protected override string EventSubject => "Legacy.Post";

        /// <inheritdoc/>
        protected override EventSubjectFormat EventSubjectFormat => EventSubjectFormat.NameAndKey;

        /// <inheritdoc/>
        protected override EventActionFormat EventActionFormat => EventActionFormat.PastTense;

        /// <inheritdoc/>
        protected override Uri? EventSource => new Uri("/database/cdc/legacy/posts", UriKind.Relative);

        /// <inheritdoc/>
        protected override EventSourceFormat EventSourceFormat { get; } = EventSourceFormat.NameOnly;

        /// <summary>
        /// Represents a <see cref="PostCdc"/> envelope to append the required (additional) database properties.
        /// </summary>
        public class PostCdcEnvelope : PostCdc, IEntityEnvelope
        {
            /// <inheritdoc/>
            [JsonIgnore]
            public CdcOperationType DatabaseOperationType { get; set; }

            /// <inheritdoc/>
            [JsonIgnore]
            public string? DatabaseTrackingHash { get; set; }

            /// <inheritdoc/>
            [JsonIgnore]
            public byte[] DatabaseLsn { get; set; }
        }

        /// <summary>
        /// Represents a <see cref="PostCdcEnvelope"/> collection.
        /// </summary>
        public class PostCdcEnvelopeCollection : List<PostCdcEnvelope> { }

        /// <summary>
        /// Represents a <see cref="PostCdc"/> database mapper.
        /// </summary>
        public class PostCdcMapper : IDatabaseMapper<PostCdcEnvelope>
        {
            /// <inheritdoc/>
            public PostCdcEnvelope? MapFromDb(DatabaseRecord record, OperationTypes operationType) => new PostCdcEnvelope
            {
                PostsId = record.GetValue<int>("PostsId"),
                Text = record.GetValue<string?>("Text"),
                Date = record.GetValue<DateTime?>("Date"),
                DatabaseOperationType = record.GetValue<CdcOperationType>("_OperationType"),
                DatabaseTrackingHash = record.GetValue<string>("_TrackingHash"),
                DatabaseLsn = record.GetValue<byte[]>("_Lsn")
            };

            /// <inheritdoc/>
            void IDatabaseMapper<PostCdcEnvelope>.MapToDb(PostCdcEnvelope? value, DatabaseParameterCollection parameters, OperationTypes operationType) => throw new NotImplementedException();
        }

        /// <summary>
        /// Represents a <see cref="CommentCdc"/> database mapper.
        /// </summary>
        public class CommentCdcMapper : IDatabaseMapper<PostCdc.CommentCdc>
        {
            /// <inheritdoc/>
            public PostCdc.CommentCdc? MapFromDb(DatabaseRecord record, OperationTypes operationType) => new PostCdc.CommentCdc
            {
                CommentsId = record.GetValue<int>("CommentsId"),
                PostsId = record.GetValue<int>("PostsId"),
                Text = record.GetValue<string?>("Text"),
                Date = record.GetValue<DateTime?>("Date")
            };

            /// <inheritdoc/>
            void IDatabaseMapper<PostCdc.CommentCdc>.MapToDb(PostCdc.CommentCdc? value, DatabaseParameterCollection parameters, OperationTypes operationType) => throw new NotImplementedException();
        }

        /// <summary>
        /// Represents a <see cref="CommentsTagsCdc"/> database mapper.
        /// </summary>
        public class CommentsTagsCdcMapper : IDatabaseMapper<PostCdc.CommentsTagsCdc>
        {
            /// <inheritdoc/>
            public PostCdc.CommentsTagsCdc? MapFromDb(DatabaseRecord record, OperationTypes operationType) => new PostCdc.CommentsTagsCdc
            {
                Posts_PostsId = record.GetValue<int>("Posts_PostsId"),
                TagsId = record.GetValue<int>("TagsId"),
                ParentType = record.GetValue<string?>("ParentType"),
                ParentId = record.GetValue<int>("ParentId"),
                Text = record.GetValue<string?>("Text")
            };

            /// <inheritdoc/>
            void IDatabaseMapper<PostCdc.CommentsTagsCdc>.MapToDb(PostCdc.CommentsTagsCdc? value, DatabaseParameterCollection parameters, OperationTypes operationType) => throw new NotImplementedException();
        }

        /// <summary>
        /// Represents a <see cref="PostsTagsCdc"/> database mapper.
        /// </summary>
        public class PostsTagsCdcMapper : IDatabaseMapper<PostCdc.PostsTagsCdc>
        {
            /// <inheritdoc/>
            public PostCdc.PostsTagsCdc? MapFromDb(DatabaseRecord record, OperationTypes operationType) => new PostCdc.PostsTagsCdc
            {
                TagsId = record.GetValue<int>("TagsId"),
                ParentType = record.GetValue<string?>("ParentType"),
                PostsId = record.GetValue<int>("PostsId"),
                Text = record.GetValue<string?>("Text")
            };

            /// <inheritdoc/>
            void IDatabaseMapper<PostCdc.PostsTagsCdc>.MapToDb(PostCdc.PostsTagsCdc? value, DatabaseParameterCollection parameters, OperationTypes operationType) => throw new NotImplementedException();
        }
    }
}

#pragma warning restore
#nullable restore