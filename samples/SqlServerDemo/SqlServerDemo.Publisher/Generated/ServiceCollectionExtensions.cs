/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using NTangle;
using NTangle.Events;
using SqlServerDemo.Publisher.Data;
using SqlServerDemo.Publisher.Events;
using SqlServerDemo.Publisher.Services;

namespace SqlServerDemo.Publisher
{
    /// <summary>
    /// Provides <see cref="IServiceCollection"/> extensions.
    /// </summary>
    public static class ServiceCollectionExtensions
    {
        /// <summary>
        /// Adds the generated <see cref="NTangle.Cdc.IEntityOrchestrator"/> scoped services.
        /// </summary>
        /// <param name="services">The <see cref="IServiceCollection"/>.</param>
        /// <returns>The <see cref="IServiceCollection"/>.</returns>
        public static IServiceCollection AddGeneratedOrchestratorServices(this IServiceCollection services)
            => services.AddScoped<IPostCdcOrchestrator, PostCdcOrchestrator>()
                       .AddScoped<IContactCdcOrchestrator, ContactCdcOrchestrator>()
                       .AddScoped<ICustomerCdcOrchestrator, CustomerCdcOrchestrator>();

        /// <summary>
        /// Adds the generated <see cref="NTangle.Services.HostedService"/> services.
        /// </summary>
        /// <param name="services">The <see cref="IServiceCollection"/>.</param>
        /// <param name="config">The <see cref="IConfiguration"/>.</param>
        /// <returns>The <see cref="IServiceCollection"/>.</returns>
        public static IServiceCollection AddGeneratedHostedServices(this IServiceCollection services, IConfiguration config)
            => services.AddNTangleHostedService<PostHostedService>(config)
                       .AddNTangleHostedService<ContactHostedService>(config)
                       .AddNTangleHostedService<CustomerHostedService>(config);

        /// <summary>
        /// Adds the generated <see cref="OutboxEventPublisher"/> (see <see cref="NTangle.Events.OutboxEventPublisherBase"/>) as the <see cref="IEventPublisher"/> scoped service.
        /// </summary>
        /// <param name="services">The <see cref="IServiceCollection"/>.</param>
        /// <returns>The <see cref="IServiceCollection"/>.</returns>
        public static IServiceCollection AddGeneratedOutboxEventPublisher(this IServiceCollection services) => services.AddScoped<IEventPublisher, OutboxEventPublisher>();

        /// <summary>
        /// Adds the generated <see cref="OutboxDequeueHostedService"/> (see <see cref="NTangle.Service.OutboxPublishHostedService"/>) service; whilst also adding the corresponding <typeparamref name="TPublisher"/> as the <see cref="IOutboxEventPublisher"/> scoped service.
        /// </summary>
        /// <typeparam name="TPublisher">The <see cref="IOutboxEventPublisher"/> <see cref="Type"/>.</typeparam>
        /// <param name="services">The <see cref="IServiceCollection"/>.</param>
        /// <param name="config">The <see cref="IConfiguration"/>.</param>
        /// <returns>The <see cref="IServiceCollection"/>.</returns>
        /// <remarks>To turn off the execution of the hosted service via set <c>OutboxDequeue</c> configuration setting to <c>false</c>.</remarks>
        public static IServiceCollection AddGeneratedOutboxDequeueHostedService<TPublisher>(this IServiceCollection services, IConfiguration config) where TPublisher : class, IOutboxEventPublisher
        {
            var exe = (config ?? throw new System.ArgumentNullException(nameof(config))).GetValue<bool?>("OutboxDequeue");
            return (!exe.HasValue || exe.Value) ? services.AddScoped<IOutboxEventPublisher, TPublisher>().AddHostedService<OutboxDequeueHostedService>() : services;
        }
    }
}

#pragma warning restore
#nullable restore