/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using NTangle;
using NTangle.Data;
using NTangle.Events;
using SqlServerDemo.Publisher.Data;
using SqlServerDemo.Publisher.Events;
using SqlServerDemo.Publisher.Services;

namespace SqlServerDemo.Publisher
{
    /// <summary>
    /// Provides <see cref="IServiceCollection"/> extensions.
    /// </summary>
    public static class ServiceCollectionExtensions
    {
        /// <summary>
        /// Adds the generated <see cref="NTangle.Cdc.IEntityOrchestrator"/> scoped services.
        /// </summary>
        /// <param name="services">The <see cref="IServiceCollection"/>.</param>
        /// <returns>The <see cref="IServiceCollection"/>.</returns>
        public static IServiceCollection AddGeneratedOrchestratorServices(this IServiceCollection services)
            => services.AddScoped<IPostCdcOrchestrator, PostCdcOrchestrator>()
                       .AddScoped<IContactCdcOrchestrator, ContactCdcOrchestrator>()
                       .AddScoped<ICustomerCdcOrchestrator, CustomerCdcOrchestrator>();

        /// <summary>
        /// Adds the generated <see cref="NTangle.Services.HostedService"/> services.
        /// </summary>
        /// <param name="services">The <see cref="IServiceCollection"/>.</param>
        /// <param name="config">The <see cref="IConfiguration"/>.</param>
        /// <returns>The <see cref="IServiceCollection"/>.</returns>
        public static IServiceCollection AddGeneratedHostedServices(this IServiceCollection services, IConfiguration config)
            => services.AddNTangleHostedService<PostHostedService>(config)
                       .AddNTangleHostedService<ContactHostedService>(config)
                       .AddNTangleHostedService<CustomerHostedService>(config);

        /// <summary>
        /// Adds the generated <see cref="OutboxEventPublisher"/> (see <see cref="OutboxEventPublisherBase{TMapper}"/>) as the <see cref="IEventPublisher"/>, and the generated
        /// <see cref="OutboxDequeuePublisher"/> as the <see cref="IOutboxDequeuePublisher"/>, as scoped services.
        /// </summary>
        /// <param name="services">The <see cref="IServiceCollection"/>.</param>
        /// <returns>The <see cref="IServiceCollection"/>.</returns>
        public static IServiceCollection AddGeneratedOutboxEventPublishing(this IServiceCollection services)
            => services.AddScoped<IEventPublisher, OutboxEventPublisher>()
                       .AddScoped<IOutboxDequeuePublisher, OutboxDequeuePublisher>();
    }
}

#pragma warning restore
#nullable restore